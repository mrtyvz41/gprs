
kagas4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002050  08002050  00012050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002088  08002088  00012088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800208c  0800208c  0001208c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08002090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001e4  20000074  08002104  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000258  08002104  00020258  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000def8  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f00  00000000  00000000  0002df94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003897  00000000  00000000  0002fe94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000630  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f8  00000000  00000000  00033d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003a9f  00000000  00000000  00034358  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000248a  00000000  00000000  00037df7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a281  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000eb0  00000000  00000000  0003a300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002038 	.word	0x08002038

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08002038 	.word	0x08002038

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000230:	b510      	push	{r4, lr}
 8000232:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000234:	f000 fd62 	bl	8000cfc <HAL_RCC_GetHCLKFreq>
 8000238:	21fa      	movs	r1, #250	; 0xfa
 800023a:	0089      	lsls	r1, r1, #2
 800023c:	f7ff ff6c 	bl	8000118 <__udivsi3>
 8000240:	f000 f876 	bl	8000330 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000244:	2200      	movs	r2, #0
 8000246:	0021      	movs	r1, r4
 8000248:	2001      	movs	r0, #1
 800024a:	4240      	negs	r0, r0
 800024c:	f000 f832 	bl	80002b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000250:	2000      	movs	r0, #0
 8000252:	bd10      	pop	{r4, pc}

08000254 <HAL_Init>:
{
 8000254:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000256:	4a06      	ldr	r2, [pc, #24]	; (8000270 <HAL_Init+0x1c>)
 8000258:	6813      	ldr	r3, [r2, #0]
 800025a:	2110      	movs	r1, #16
 800025c:	430b      	orrs	r3, r1
 800025e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
 8000262:	f7ff ffe5 	bl	8000230 <HAL_InitTick>
  HAL_MspInit();
 8000266:	f001 fc39 	bl	8001adc <HAL_MspInit>
}
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	40022000 	.word	0x40022000

08000274 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000274:	4a02      	ldr	r2, [pc, #8]	; (8000280 <HAL_IncTick+0xc>)
 8000276:	6813      	ldr	r3, [r2, #0]
 8000278:	3301      	adds	r3, #1
 800027a:	6013      	str	r3, [r2, #0]
}
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	200000a0 	.word	0x200000a0

08000284 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000284:	4b01      	ldr	r3, [pc, #4]	; (800028c <HAL_GetTick+0x8>)
 8000286:	6818      	ldr	r0, [r3, #0]
}
 8000288:	4770      	bx	lr
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	200000a0 	.word	0x200000a0

08000290 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000290:	b530      	push	{r4, r5, lr}
 8000292:	b083      	sub	sp, #12
 8000294:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000296:	f7ff fff5 	bl	8000284 <HAL_GetTick>
 800029a:	0005      	movs	r5, r0
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 800029e:	1c63      	adds	r3, r4, #1
 80002a0:	1e5a      	subs	r2, r3, #1
 80002a2:	4193      	sbcs	r3, r2
 80002a4:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a6:	f7ff ffed 	bl	8000284 <HAL_GetTick>
 80002aa:	1b40      	subs	r0, r0, r5
 80002ac:	42a0      	cmp	r0, r4
 80002ae:	d3fa      	bcc.n	80002a6 <HAL_Delay+0x16>
  {
  }
}
 80002b0:	b003      	add	sp, #12
 80002b2:	bd30      	pop	{r4, r5, pc}

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b6:	2800      	cmp	r0, #0
 80002b8:	db14      	blt.n	80002e4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002ba:	0883      	lsrs	r3, r0, #2
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	4a15      	ldr	r2, [pc, #84]	; (8000314 <HAL_NVIC_SetPriority+0x60>)
 80002c0:	4694      	mov	ip, r2
 80002c2:	4463      	add	r3, ip
 80002c4:	26c0      	movs	r6, #192	; 0xc0
 80002c6:	00b6      	lsls	r6, r6, #2
 80002c8:	599d      	ldr	r5, [r3, r6]
 80002ca:	2403      	movs	r4, #3
 80002cc:	4020      	ands	r0, r4
 80002ce:	00c0      	lsls	r0, r0, #3
 80002d0:	22ff      	movs	r2, #255	; 0xff
 80002d2:	0014      	movs	r4, r2
 80002d4:	4084      	lsls	r4, r0
 80002d6:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d8:	0189      	lsls	r1, r1, #6
 80002da:	400a      	ands	r2, r1
 80002dc:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002de:	432a      	orrs	r2, r5
 80002e0:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e4:	b2c0      	uxtb	r0, r0
 80002e6:	230f      	movs	r3, #15
 80002e8:	4003      	ands	r3, r0
 80002ea:	3b08      	subs	r3, #8
 80002ec:	089b      	lsrs	r3, r3, #2
 80002ee:	009b      	lsls	r3, r3, #2
 80002f0:	4a09      	ldr	r2, [pc, #36]	; (8000318 <HAL_NVIC_SetPriority+0x64>)
 80002f2:	4694      	mov	ip, r2
 80002f4:	4463      	add	r3, ip
 80002f6:	69dd      	ldr	r5, [r3, #28]
 80002f8:	2203      	movs	r2, #3
 80002fa:	4010      	ands	r0, r2
 80002fc:	00c0      	lsls	r0, r0, #3
 80002fe:	24ff      	movs	r4, #255	; 0xff
 8000300:	0022      	movs	r2, r4
 8000302:	4082      	lsls	r2, r0
 8000304:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000306:	0189      	lsls	r1, r1, #6
 8000308:	400c      	ands	r4, r1
 800030a:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800030c:	432c      	orrs	r4, r5
 800030e:	61dc      	str	r4, [r3, #28]
 8000310:	e7e7      	b.n	80002e2 <HAL_NVIC_SetPriority+0x2e>
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	e000e100 	.word	0xe000e100
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800031c:	231f      	movs	r3, #31
 800031e:	4018      	ands	r0, r3
 8000320:	3b1e      	subs	r3, #30
 8000322:	4083      	lsls	r3, r0
 8000324:	4a01      	ldr	r2, [pc, #4]	; (800032c <HAL_NVIC_EnableIRQ+0x10>)
 8000326:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000328:	4770      	bx	lr
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	e000e100 	.word	0xe000e100

08000330 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000330:	1e43      	subs	r3, r0, #1
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000334:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000336:	4293      	cmp	r3, r2
 8000338:	d80e      	bhi.n	8000358 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800033a:	4a09      	ldr	r2, [pc, #36]	; (8000360 <HAL_SYSTICK_Config+0x30>)
 800033c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800033e:	4809      	ldr	r0, [pc, #36]	; (8000364 <HAL_SYSTICK_Config+0x34>)
 8000340:	6a03      	ldr	r3, [r0, #32]
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	0a1b      	lsrs	r3, r3, #8
 8000346:	21c0      	movs	r1, #192	; 0xc0
 8000348:	0609      	lsls	r1, r1, #24
 800034a:	430b      	orrs	r3, r1
 800034c:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800034e:	2300      	movs	r3, #0
 8000350:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000352:	3307      	adds	r3, #7
 8000354:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000356:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000358:	4770      	bx	lr
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	00ffffff 	.word	0x00ffffff
 8000360:	e000e010 	.word	0xe000e010
 8000364:	e000ed00 	.word	0xe000ed00

08000368 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000368:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800036a:	2321      	movs	r3, #33	; 0x21
 800036c:	5cc3      	ldrb	r3, [r0, r3]
 800036e:	2b02      	cmp	r3, #2
 8000370:	d003      	beq.n	800037a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000372:	2304      	movs	r3, #4
 8000374:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000376:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8000378:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800037a:	6802      	ldr	r2, [r0, #0]
 800037c:	6813      	ldr	r3, [r2, #0]
 800037e:	210e      	movs	r1, #14
 8000380:	438b      	bics	r3, r1
 8000382:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000384:	6801      	ldr	r1, [r0, #0]
 8000386:	680a      	ldr	r2, [r1, #0]
 8000388:	2301      	movs	r3, #1
 800038a:	439a      	bics	r2, r3
 800038c:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800038e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000390:	0019      	movs	r1, r3
 8000392:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000394:	40a1      	lsls	r1, r4
 8000396:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000398:	2221      	movs	r2, #33	; 0x21
 800039a:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800039c:	2200      	movs	r2, #0
 800039e:	331f      	adds	r3, #31
 80003a0:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80003a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d002      	beq.n	80003ae <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80003a8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80003aa:	2000      	movs	r0, #0
 80003ac:	e7e4      	b.n	8000378 <HAL_DMA_Abort_IT+0x10>
 80003ae:	2000      	movs	r0, #0
 80003b0:	e7e2      	b.n	8000378 <HAL_DMA_Abort_IT+0x10>
	...

080003b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80003b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003b6:	46de      	mov	lr, fp
 80003b8:	4657      	mov	r7, sl
 80003ba:	464e      	mov	r6, r9
 80003bc:	4645      	mov	r5, r8
 80003be:	b5e0      	push	{r5, r6, r7, lr}
 80003c0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80003c2:	680a      	ldr	r2, [r1, #0]
 80003c4:	2a00      	cmp	r2, #0
 80003c6:	d100      	bne.n	80003ca <HAL_GPIO_Init+0x16>
 80003c8:	e0bb      	b.n	8000542 <HAL_GPIO_Init+0x18e>
 80003ca:	2500      	movs	r5, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80003cc:	2301      	movs	r3, #1
 80003ce:	4698      	mov	r8, r3
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80003d0:	330f      	adds	r3, #15
 80003d2:	469a      	mov	sl, r3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003d4:	3b0d      	subs	r3, #13
 80003d6:	4699      	mov	r9, r3
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003d8:	2380      	movs	r3, #128	; 0x80
 80003da:	055b      	lsls	r3, r3, #21
 80003dc:	469b      	mov	fp, r3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003de:	4b5c      	ldr	r3, [pc, #368]	; (8000550 <HAL_GPIO_Init+0x19c>)
 80003e0:	18c3      	adds	r3, r0, r3
 80003e2:	1e5c      	subs	r4, r3, #1
 80003e4:	41a3      	sbcs	r3, r4
 80003e6:	3304      	adds	r3, #4
 80003e8:	9301      	str	r3, [sp, #4]
 80003ea:	e03c      	b.n	8000466 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3];
 80003ec:	08eb      	lsrs	r3, r5, #3
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	18c3      	adds	r3, r0, r3
 80003f2:	6a1f      	ldr	r7, [r3, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80003f4:	2407      	movs	r4, #7
 80003f6:	402c      	ands	r4, r5
 80003f8:	00a4      	lsls	r4, r4, #2
 80003fa:	220f      	movs	r2, #15
 80003fc:	40a2      	lsls	r2, r4
 80003fe:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000400:	690a      	ldr	r2, [r1, #16]
 8000402:	40a2      	lsls	r2, r4
 8000404:	0014      	movs	r4, r2
 8000406:	433c      	orrs	r4, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000408:	621c      	str	r4, [r3, #32]
 800040a:	e036      	b.n	800047a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 800040c:	6883      	ldr	r3, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800040e:	4023      	ands	r3, r4
 8000410:	469c      	mov	ip, r3
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000412:	68cb      	ldr	r3, [r1, #12]
 8000414:	40bb      	lsls	r3, r7
 8000416:	4662      	mov	r2, ip
 8000418:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 800041a:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 800041c:	6843      	ldr	r3, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800041e:	43b3      	bics	r3, r6
 8000420:	001e      	movs	r6, r3
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000422:	684b      	ldr	r3, [r1, #4]
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4642      	mov	r2, r8
 8000428:	4013      	ands	r3, r2
 800042a:	40ab      	lsls	r3, r5
 800042c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800042e:	6043      	str	r3, [r0, #4]
 8000430:	e037      	b.n	80004a2 <HAL_GPIO_Init+0xee>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000432:	2400      	movs	r4, #0
 8000434:	e063      	b.n	80004fe <HAL_GPIO_Init+0x14a>
 8000436:	4644      	mov	r4, r8
 8000438:	e061      	b.n	80004fe <HAL_GPIO_Init+0x14a>
 800043a:	2402      	movs	r4, #2
 800043c:	e05f      	b.n	80004fe <HAL_GPIO_Init+0x14a>
 800043e:	464c      	mov	r4, r9
 8000440:	e05d      	b.n	80004fe <HAL_GPIO_Init+0x14a>
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(temp, iocurrent); 
 8000442:	9a00      	ldr	r2, [sp, #0]
 8000444:	4313      	orrs	r3, r2
 8000446:	e065      	b.n	8000514 <HAL_GPIO_Init+0x160>

        temp = EXTI->EMR;
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          SET_BIT(temp, iocurrent); 
 8000448:	9a00      	ldr	r2, [sp, #0]
 800044a:	4313      	orrs	r3, r2
 800044c:	e069      	b.n	8000522 <HAL_GPIO_Init+0x16e>
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
 800044e:	9a00      	ldr	r2, [sp, #0]
 8000450:	4313      	orrs	r3, r2
 8000452:	e06d      	b.n	8000530 <HAL_GPIO_Init+0x17c>

        temp = EXTI->FTSR;
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(temp, iocurrent); 
 8000454:	9a00      	ldr	r2, [sp, #0]
 8000456:	431a      	orrs	r2, r3
        }
        EXTI->FTSR = temp;
 8000458:	4b3e      	ldr	r3, [pc, #248]	; (8000554 <HAL_GPIO_Init+0x1a0>)
 800045a:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800045c:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 800045e:	680a      	ldr	r2, [r1, #0]
 8000460:	0013      	movs	r3, r2
 8000462:	40eb      	lsrs	r3, r5
 8000464:	d06d      	beq.n	8000542 <HAL_GPIO_Init+0x18e>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000466:	4646      	mov	r6, r8
 8000468:	40ae      	lsls	r6, r5
 800046a:	4032      	ands	r2, r6
 800046c:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800046e:	d0f5      	beq.n	800045c <HAL_GPIO_Init+0xa8>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000470:	684b      	ldr	r3, [r1, #4]
 8000472:	4654      	mov	r4, sl
 8000474:	43a3      	bics	r3, r4
 8000476:	2b02      	cmp	r3, #2
 8000478:	d0b8      	beq.n	80003ec <HAL_GPIO_Init+0x38>
      temp = GPIOx->MODER;
 800047a:	6803      	ldr	r3, [r0, #0]
 800047c:	006f      	lsls	r7, r5, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800047e:	464c      	mov	r4, r9
 8000480:	40bc      	lsls	r4, r7
 8000482:	43e4      	mvns	r4, r4
 8000484:	4023      	ands	r3, r4
 8000486:	469c      	mov	ip, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000488:	684b      	ldr	r3, [r1, #4]
 800048a:	464a      	mov	r2, r9
 800048c:	4013      	ands	r3, r2
 800048e:	40bb      	lsls	r3, r7
 8000490:	4662      	mov	r2, ip
 8000492:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8000494:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000496:	684b      	ldr	r3, [r1, #4]
 8000498:	4652      	mov	r2, sl
 800049a:	4393      	bics	r3, r2
 800049c:	3b01      	subs	r3, #1
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d9b4      	bls.n	800040c <HAL_GPIO_Init+0x58>
      temp = GPIOx->PUPDR;
 80004a2:	68c3      	ldr	r3, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004a4:	4023      	ands	r3, r4
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80004a6:	688c      	ldr	r4, [r1, #8]
 80004a8:	40bc      	lsls	r4, r7
 80004aa:	431c      	orrs	r4, r3
      GPIOx->PUPDR = temp;
 80004ac:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80004ae:	684b      	ldr	r3, [r1, #4]
 80004b0:	465a      	mov	r2, fp
 80004b2:	4213      	tst	r3, r2
 80004b4:	d0d2      	beq.n	800045c <HAL_GPIO_Init+0xa8>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	4b28      	ldr	r3, [pc, #160]	; (8000558 <HAL_GPIO_Init+0x1a4>)
 80004b8:	699c      	ldr	r4, [r3, #24]
 80004ba:	4642      	mov	r2, r8
 80004bc:	4314      	orrs	r4, r2
 80004be:	619c      	str	r4, [r3, #24]
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4013      	ands	r3, r2
 80004c4:	9303      	str	r3, [sp, #12]
 80004c6:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80004c8:	08ab      	lsrs	r3, r5, #2
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	4a23      	ldr	r2, [pc, #140]	; (800055c <HAL_GPIO_Init+0x1a8>)
 80004ce:	4694      	mov	ip, r2
 80004d0:	4463      	add	r3, ip
 80004d2:	689c      	ldr	r4, [r3, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80004d4:	464e      	mov	r6, r9
 80004d6:	402e      	ands	r6, r5
 80004d8:	00b6      	lsls	r6, r6, #2
 80004da:	270f      	movs	r7, #15
 80004dc:	40b7      	lsls	r7, r6
 80004de:	43bc      	bics	r4, r7
 80004e0:	0027      	movs	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004e2:	2490      	movs	r4, #144	; 0x90
 80004e4:	05e4      	lsls	r4, r4, #23
 80004e6:	42a0      	cmp	r0, r4
 80004e8:	d0a3      	beq.n	8000432 <HAL_GPIO_Init+0x7e>
 80004ea:	4c1d      	ldr	r4, [pc, #116]	; (8000560 <HAL_GPIO_Init+0x1ac>)
 80004ec:	42a0      	cmp	r0, r4
 80004ee:	d0a2      	beq.n	8000436 <HAL_GPIO_Init+0x82>
 80004f0:	4c1c      	ldr	r4, [pc, #112]	; (8000564 <HAL_GPIO_Init+0x1b0>)
 80004f2:	42a0      	cmp	r0, r4
 80004f4:	d0a1      	beq.n	800043a <HAL_GPIO_Init+0x86>
 80004f6:	4c1c      	ldr	r4, [pc, #112]	; (8000568 <HAL_GPIO_Init+0x1b4>)
 80004f8:	42a0      	cmp	r0, r4
 80004fa:	d0a0      	beq.n	800043e <HAL_GPIO_Init+0x8a>
 80004fc:	9c01      	ldr	r4, [sp, #4]
 80004fe:	40b4      	lsls	r4, r6
 8000500:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000502:	609c      	str	r4, [r3, #8]
        temp = EXTI->IMR;
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <HAL_GPIO_Init+0x1a0>)
 8000506:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000508:	9a00      	ldr	r2, [sp, #0]
 800050a:	43d4      	mvns	r4, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800050c:	684a      	ldr	r2, [r1, #4]
 800050e:	03d2      	lsls	r2, r2, #15
 8000510:	d497      	bmi.n	8000442 <HAL_GPIO_Init+0x8e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000512:	4023      	ands	r3, r4
        EXTI->IMR = temp;
 8000514:	4e0f      	ldr	r6, [pc, #60]	; (8000554 <HAL_GPIO_Init+0x1a0>)
 8000516:	6033      	str	r3, [r6, #0]
        temp = EXTI->EMR;
 8000518:	6873      	ldr	r3, [r6, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800051a:	684a      	ldr	r2, [r1, #4]
 800051c:	0392      	lsls	r2, r2, #14
 800051e:	d493      	bmi.n	8000448 <HAL_GPIO_Init+0x94>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000520:	4023      	ands	r3, r4
        EXTI->EMR = temp;
 8000522:	4e0c      	ldr	r6, [pc, #48]	; (8000554 <HAL_GPIO_Init+0x1a0>)
 8000524:	6073      	str	r3, [r6, #4]
        temp = EXTI->RTSR;
 8000526:	68b3      	ldr	r3, [r6, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000528:	684a      	ldr	r2, [r1, #4]
 800052a:	02d2      	lsls	r2, r2, #11
 800052c:	d48f      	bmi.n	800044e <HAL_GPIO_Init+0x9a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800052e:	4023      	ands	r3, r4
        EXTI->RTSR = temp;
 8000530:	4e08      	ldr	r6, [pc, #32]	; (8000554 <HAL_GPIO_Init+0x1a0>)
 8000532:	60b3      	str	r3, [r6, #8]
        temp = EXTI->FTSR;
 8000534:	68f3      	ldr	r3, [r6, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000536:	684a      	ldr	r2, [r1, #4]
 8000538:	0292      	lsls	r2, r2, #10
 800053a:	d48b      	bmi.n	8000454 <HAL_GPIO_Init+0xa0>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800053c:	4023      	ands	r3, r4
 800053e:	001a      	movs	r2, r3
 8000540:	e78a      	b.n	8000458 <HAL_GPIO_Init+0xa4>
  } 
}
 8000542:	b005      	add	sp, #20
 8000544:	bc3c      	pop	{r2, r3, r4, r5}
 8000546:	4690      	mov	r8, r2
 8000548:	4699      	mov	r9, r3
 800054a:	46a2      	mov	sl, r4
 800054c:	46ab      	mov	fp, r5
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000550:	b7fff000 	.word	0xb7fff000
 8000554:	40010400 	.word	0x40010400
 8000558:	40021000 	.word	0x40021000
 800055c:	40010000 	.word	0x40010000
 8000560:	48000400 	.word	0x48000400
 8000564:	48000800 	.word	0x48000800
 8000568:	48000c00 	.word	0x48000c00

0800056c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800056c:	6900      	ldr	r0, [r0, #16]
 800056e:	4008      	ands	r0, r1
 8000570:	1e41      	subs	r1, r0, #1
 8000572:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000574:	b2c0      	uxtb	r0, r0
  }
 8000576:	4770      	bx	lr

08000578 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000578:	2a00      	cmp	r2, #0
 800057a:	d101      	bne.n	8000580 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800057c:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800057e:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000580:	6181      	str	r1, [r0, #24]
 8000582:	e7fc      	b.n	800057e <HAL_GPIO_WritePin+0x6>

08000584 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000584:	6943      	ldr	r3, [r0, #20]
 8000586:	4059      	eors	r1, r3
 8000588:	6141      	str	r1, [r0, #20]
}
 800058a:	4770      	bx	lr

0800058c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800058c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058e:	46ce      	mov	lr, r9
 8000590:	4647      	mov	r7, r8
 8000592:	b580      	push	{r7, lr}
 8000594:	b083      	sub	sp, #12
 8000596:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000598:	6803      	ldr	r3, [r0, #0]
 800059a:	07db      	lsls	r3, r3, #31
 800059c:	d541      	bpl.n	8000622 <HAL_RCC_OscConfig+0x96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800059e:	4bbd      	ldr	r3, [pc, #756]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	230c      	movs	r3, #12
 80005a4:	4013      	ands	r3, r2
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d033      	beq.n	8000612 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005aa:	4bba      	ldr	r3, [pc, #744]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80005ac:	685a      	ldr	r2, [r3, #4]
 80005ae:	230c      	movs	r3, #12
 80005b0:	4013      	ands	r3, r2
 80005b2:	2b08      	cmp	r3, #8
 80005b4:	d024      	beq.n	8000600 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005b6:	6863      	ldr	r3, [r4, #4]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d057      	beq.n	800066c <HAL_RCC_OscConfig+0xe0>
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d15c      	bne.n	800067a <HAL_RCC_OscConfig+0xee>
 80005c0:	4bb4      	ldr	r3, [pc, #720]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	49b4      	ldr	r1, [pc, #720]	; (8000898 <HAL_RCC_OscConfig+0x30c>)
 80005c6:	400a      	ands	r2, r1
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	49b3      	ldr	r1, [pc, #716]	; (800089c <HAL_RCC_OscConfig+0x310>)
 80005ce:	400a      	ands	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80005d2:	6863      	ldr	r3, [r4, #4]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d068      	beq.n	80006aa <HAL_RCC_OscConfig+0x11e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005d8:	f7ff fe54 	bl	8000284 <HAL_GetTick>
 80005dc:	0007      	movs	r7, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005de:	4ead      	ldr	r6, [pc, #692]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80005e0:	2580      	movs	r5, #128	; 0x80
 80005e2:	02ad      	lsls	r5, r5, #10
 80005e4:	6833      	ldr	r3, [r6, #0]
 80005e6:	422b      	tst	r3, r5
 80005e8:	d11b      	bne.n	8000622 <HAL_RCC_OscConfig+0x96>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ea:	f7ff fe4b 	bl	8000284 <HAL_GetTick>
 80005ee:	1bc0      	subs	r0, r0, r7
 80005f0:	2864      	cmp	r0, #100	; 0x64
 80005f2:	d9f7      	bls.n	80005e4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80005f4:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80005f6:	b003      	add	sp, #12
 80005f8:	bc0c      	pop	{r2, r3}
 80005fa:	4690      	mov	r8, r2
 80005fc:	4699      	mov	r9, r3
 80005fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000600:	4ba4      	ldr	r3, [pc, #656]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	22c0      	movs	r2, #192	; 0xc0
 8000606:	0252      	lsls	r2, r2, #9
 8000608:	4013      	ands	r3, r2
 800060a:	2280      	movs	r2, #128	; 0x80
 800060c:	0252      	lsls	r2, r2, #9
 800060e:	4293      	cmp	r3, r2
 8000610:	d1d1      	bne.n	80005b6 <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000612:	4ba0      	ldr	r3, [pc, #640]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	039b      	lsls	r3, r3, #14
 8000618:	d503      	bpl.n	8000622 <HAL_RCC_OscConfig+0x96>
        return HAL_ERROR;
 800061a:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800061c:	6863      	ldr	r3, [r4, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d0e9      	beq.n	80005f6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000622:	6823      	ldr	r3, [r4, #0]
 8000624:	079b      	lsls	r3, r3, #30
 8000626:	d56a      	bpl.n	80006fe <HAL_RCC_OscConfig+0x172>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000628:	4b9a      	ldr	r3, [pc, #616]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	220c      	movs	r2, #12
 800062e:	421a      	tst	r2, r3
 8000630:	d054      	beq.n	80006dc <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000632:	4b98      	ldr	r3, [pc, #608]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000634:	685a      	ldr	r2, [r3, #4]
 8000636:	230c      	movs	r3, #12
 8000638:	4013      	ands	r3, r2
 800063a:	2b08      	cmp	r3, #8
 800063c:	d045      	beq.n	80006ca <HAL_RCC_OscConfig+0x13e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800063e:	68e3      	ldr	r3, [r4, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d07f      	beq.n	8000744 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_ENABLE();
 8000644:	4a93      	ldr	r2, [pc, #588]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000646:	6813      	ldr	r3, [r2, #0]
 8000648:	2101      	movs	r1, #1
 800064a:	430b      	orrs	r3, r1
 800064c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800064e:	f7ff fe19 	bl	8000284 <HAL_GetTick>
 8000652:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000654:	4e8f      	ldr	r6, [pc, #572]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000656:	2502      	movs	r5, #2
 8000658:	6833      	ldr	r3, [r6, #0]
 800065a:	421d      	tst	r5, r3
 800065c:	d169      	bne.n	8000732 <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800065e:	f7ff fe11 	bl	8000284 <HAL_GetTick>
 8000662:	1bc0      	subs	r0, r0, r7
 8000664:	2802      	cmp	r0, #2
 8000666:	d9f7      	bls.n	8000658 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8000668:	2003      	movs	r0, #3
 800066a:	e7c4      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066c:	4a89      	ldr	r2, [pc, #548]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800066e:	6811      	ldr	r1, [r2, #0]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	025b      	lsls	r3, r3, #9
 8000674:	430b      	orrs	r3, r1
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	e7ab      	b.n	80005d2 <HAL_RCC_OscConfig+0x46>
 800067a:	2b05      	cmp	r3, #5
 800067c:	d009      	beq.n	8000692 <HAL_RCC_OscConfig+0x106>
 800067e:	4b85      	ldr	r3, [pc, #532]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	4985      	ldr	r1, [pc, #532]	; (8000898 <HAL_RCC_OscConfig+0x30c>)
 8000684:	400a      	ands	r2, r1
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	681a      	ldr	r2, [r3, #0]
 800068a:	4984      	ldr	r1, [pc, #528]	; (800089c <HAL_RCC_OscConfig+0x310>)
 800068c:	400a      	ands	r2, r1
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	e79f      	b.n	80005d2 <HAL_RCC_OscConfig+0x46>
 8000692:	4b80      	ldr	r3, [pc, #512]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000694:	6819      	ldr	r1, [r3, #0]
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	02d2      	lsls	r2, r2, #11
 800069a:	430a      	orrs	r2, r1
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	6819      	ldr	r1, [r3, #0]
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	0252      	lsls	r2, r2, #9
 80006a4:	430a      	orrs	r2, r1
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	e793      	b.n	80005d2 <HAL_RCC_OscConfig+0x46>
        tickstart = HAL_GetTick();
 80006aa:	f7ff fdeb 	bl	8000284 <HAL_GetTick>
 80006ae:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006b0:	4e78      	ldr	r6, [pc, #480]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80006b2:	2580      	movs	r5, #128	; 0x80
 80006b4:	02ad      	lsls	r5, r5, #10
 80006b6:	6833      	ldr	r3, [r6, #0]
 80006b8:	422b      	tst	r3, r5
 80006ba:	d0b2      	beq.n	8000622 <HAL_RCC_OscConfig+0x96>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006bc:	f7ff fde2 	bl	8000284 <HAL_GetTick>
 80006c0:	1bc0      	subs	r0, r0, r7
 80006c2:	2864      	cmp	r0, #100	; 0x64
 80006c4:	d9f7      	bls.n	80006b6 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 80006c6:	2003      	movs	r0, #3
 80006c8:	e795      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006ca:	4b72      	ldr	r3, [pc, #456]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	22c0      	movs	r2, #192	; 0xc0
 80006d0:	0252      	lsls	r2, r2, #9
 80006d2:	4013      	ands	r3, r2
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	0212      	lsls	r2, r2, #8
 80006d8:	4293      	cmp	r3, r2
 80006da:	d1b0      	bne.n	800063e <HAL_RCC_OscConfig+0xb2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006dc:	4b6d      	ldr	r3, [pc, #436]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	079b      	lsls	r3, r3, #30
 80006e2:	d504      	bpl.n	80006ee <HAL_RCC_OscConfig+0x162>
        return HAL_ERROR;
 80006e4:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006e6:	68e3      	ldr	r3, [r4, #12]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d000      	beq.n	80006ee <HAL_RCC_OscConfig+0x162>
 80006ec:	e783      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80006ee:	4969      	ldr	r1, [pc, #420]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80006f0:	680a      	ldr	r2, [r1, #0]
 80006f2:	6923      	ldr	r3, [r4, #16]
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	20f8      	movs	r0, #248	; 0xf8
 80006f8:	4382      	bics	r2, r0
 80006fa:	4313      	orrs	r3, r2
 80006fc:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	071b      	lsls	r3, r3, #28
 8000702:	d547      	bpl.n	8000794 <HAL_RCC_OscConfig+0x208>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000704:	69e3      	ldr	r3, [r4, #28]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d030      	beq.n	800076c <HAL_RCC_OscConfig+0x1e0>
      __HAL_RCC_LSI_ENABLE();
 800070a:	4a62      	ldr	r2, [pc, #392]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800070c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800070e:	2101      	movs	r1, #1
 8000710:	430b      	orrs	r3, r1
 8000712:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000714:	f7ff fdb6 	bl	8000284 <HAL_GetTick>
 8000718:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800071a:	4e5e      	ldr	r6, [pc, #376]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800071c:	2502      	movs	r5, #2
 800071e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000720:	421d      	tst	r5, r3
 8000722:	d137      	bne.n	8000794 <HAL_RCC_OscConfig+0x208>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000724:	f7ff fdae 	bl	8000284 <HAL_GetTick>
 8000728:	1bc0      	subs	r0, r0, r7
 800072a:	2802      	cmp	r0, #2
 800072c:	d9f7      	bls.n	800071e <HAL_RCC_OscConfig+0x192>
          return HAL_TIMEOUT;
 800072e:	2003      	movs	r0, #3
 8000730:	e761      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000732:	4958      	ldr	r1, [pc, #352]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000734:	680a      	ldr	r2, [r1, #0]
 8000736:	6923      	ldr	r3, [r4, #16]
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	20f8      	movs	r0, #248	; 0xf8
 800073c:	4382      	bics	r2, r0
 800073e:	4313      	orrs	r3, r2
 8000740:	600b      	str	r3, [r1, #0]
 8000742:	e7dc      	b.n	80006fe <HAL_RCC_OscConfig+0x172>
        __HAL_RCC_HSI_DISABLE();
 8000744:	4a53      	ldr	r2, [pc, #332]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000746:	6813      	ldr	r3, [r2, #0]
 8000748:	2101      	movs	r1, #1
 800074a:	438b      	bics	r3, r1
 800074c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800074e:	f7ff fd99 	bl	8000284 <HAL_GetTick>
 8000752:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000754:	4e4f      	ldr	r6, [pc, #316]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000756:	2502      	movs	r5, #2
 8000758:	6833      	ldr	r3, [r6, #0]
 800075a:	421d      	tst	r5, r3
 800075c:	d0cf      	beq.n	80006fe <HAL_RCC_OscConfig+0x172>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800075e:	f7ff fd91 	bl	8000284 <HAL_GetTick>
 8000762:	1bc0      	subs	r0, r0, r7
 8000764:	2802      	cmp	r0, #2
 8000766:	d9f7      	bls.n	8000758 <HAL_RCC_OscConfig+0x1cc>
            return HAL_TIMEOUT;
 8000768:	2003      	movs	r0, #3
 800076a:	e744      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 800076c:	4a49      	ldr	r2, [pc, #292]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800076e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000770:	2101      	movs	r1, #1
 8000772:	438b      	bics	r3, r1
 8000774:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000776:	f7ff fd85 	bl	8000284 <HAL_GetTick>
 800077a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800077c:	4e45      	ldr	r6, [pc, #276]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800077e:	2502      	movs	r5, #2
 8000780:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000782:	421d      	tst	r5, r3
 8000784:	d006      	beq.n	8000794 <HAL_RCC_OscConfig+0x208>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000786:	f7ff fd7d 	bl	8000284 <HAL_GetTick>
 800078a:	1bc0      	subs	r0, r0, r7
 800078c:	2802      	cmp	r0, #2
 800078e:	d9f7      	bls.n	8000780 <HAL_RCC_OscConfig+0x1f4>
          return HAL_TIMEOUT;
 8000790:	2003      	movs	r0, #3
 8000792:	e730      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	075b      	lsls	r3, r3, #29
 8000798:	d400      	bmi.n	800079c <HAL_RCC_OscConfig+0x210>
 800079a:	e088      	b.n	80008ae <HAL_RCC_OscConfig+0x322>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800079c:	4b3d      	ldr	r3, [pc, #244]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800079e:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80007a0:	2200      	movs	r2, #0
 80007a2:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	d40b      	bmi.n	80007c0 <HAL_RCC_OscConfig+0x234>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007a8:	4a3a      	ldr	r2, [pc, #232]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80007aa:	69d1      	ldr	r1, [r2, #28]
 80007ac:	2080      	movs	r0, #128	; 0x80
 80007ae:	0540      	lsls	r0, r0, #21
 80007b0:	4301      	orrs	r1, r0
 80007b2:	61d1      	str	r1, [r2, #28]
 80007b4:	69d3      	ldr	r3, [r2, #28]
 80007b6:	4003      	ands	r3, r0
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007bc:	2301      	movs	r3, #1
 80007be:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007c0:	4b37      	ldr	r3, [pc, #220]	; (80008a0 <HAL_RCC_OscConfig+0x314>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	05db      	lsls	r3, r3, #23
 80007c6:	d521      	bpl.n	800080c <HAL_RCC_OscConfig+0x280>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007c8:	68a3      	ldr	r3, [r4, #8]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d034      	beq.n	8000838 <HAL_RCC_OscConfig+0x2ac>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d138      	bne.n	8000844 <HAL_RCC_OscConfig+0x2b8>
 80007d2:	4b30      	ldr	r3, [pc, #192]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80007d4:	6a1a      	ldr	r2, [r3, #32]
 80007d6:	2101      	movs	r1, #1
 80007d8:	438a      	bics	r2, r1
 80007da:	621a      	str	r2, [r3, #32]
 80007dc:	6a1a      	ldr	r2, [r3, #32]
 80007de:	3103      	adds	r1, #3
 80007e0:	438a      	bics	r2, r1
 80007e2:	621a      	str	r2, [r3, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80007e4:	68a3      	ldr	r3, [r4, #8]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d042      	beq.n	8000870 <HAL_RCC_OscConfig+0x2e4>
      tickstart = HAL_GetTick();
 80007ea:	f7ff fd4b 	bl	8000284 <HAL_GetTick>
 80007ee:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007f0:	4f28      	ldr	r7, [pc, #160]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 80007f2:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007f4:	4d2b      	ldr	r5, [pc, #172]	; (80008a4 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	421e      	tst	r6, r3
 80007fa:	d155      	bne.n	80008a8 <HAL_RCC_OscConfig+0x31c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007fc:	f7ff fd42 	bl	8000284 <HAL_GetTick>
 8000800:	464b      	mov	r3, r9
 8000802:	1ac0      	subs	r0, r0, r3
 8000804:	42a8      	cmp	r0, r5
 8000806:	d9f6      	bls.n	80007f6 <HAL_RCC_OscConfig+0x26a>
          return HAL_TIMEOUT;
 8000808:	2003      	movs	r0, #3
 800080a:	e6f4      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800080c:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <HAL_RCC_OscConfig+0x314>)
 800080e:	6811      	ldr	r1, [r2, #0]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	430b      	orrs	r3, r1
 8000816:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000818:	f7ff fd34 	bl	8000284 <HAL_GetTick>
 800081c:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800081e:	4f20      	ldr	r7, [pc, #128]	; (80008a0 <HAL_RCC_OscConfig+0x314>)
 8000820:	2680      	movs	r6, #128	; 0x80
 8000822:	0076      	lsls	r6, r6, #1
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	4233      	tst	r3, r6
 8000828:	d1ce      	bne.n	80007c8 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800082a:	f7ff fd2b 	bl	8000284 <HAL_GetTick>
 800082e:	1b40      	subs	r0, r0, r5
 8000830:	2864      	cmp	r0, #100	; 0x64
 8000832:	d9f7      	bls.n	8000824 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8000834:	2003      	movs	r0, #3
 8000836:	e6de      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000838:	4a16      	ldr	r2, [pc, #88]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800083a:	6a13      	ldr	r3, [r2, #32]
 800083c:	2101      	movs	r1, #1
 800083e:	430b      	orrs	r3, r1
 8000840:	6213      	str	r3, [r2, #32]
 8000842:	e7cf      	b.n	80007e4 <HAL_RCC_OscConfig+0x258>
 8000844:	2b05      	cmp	r3, #5
 8000846:	d009      	beq.n	800085c <HAL_RCC_OscConfig+0x2d0>
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800084a:	6a1a      	ldr	r2, [r3, #32]
 800084c:	2101      	movs	r1, #1
 800084e:	438a      	bics	r2, r1
 8000850:	621a      	str	r2, [r3, #32]
 8000852:	6a1a      	ldr	r2, [r3, #32]
 8000854:	3103      	adds	r1, #3
 8000856:	438a      	bics	r2, r1
 8000858:	621a      	str	r2, [r3, #32]
 800085a:	e7c3      	b.n	80007e4 <HAL_RCC_OscConfig+0x258>
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 800085e:	6a1a      	ldr	r2, [r3, #32]
 8000860:	2104      	movs	r1, #4
 8000862:	430a      	orrs	r2, r1
 8000864:	621a      	str	r2, [r3, #32]
 8000866:	6a1a      	ldr	r2, [r3, #32]
 8000868:	3903      	subs	r1, #3
 800086a:	430a      	orrs	r2, r1
 800086c:	621a      	str	r2, [r3, #32]
 800086e:	e7b9      	b.n	80007e4 <HAL_RCC_OscConfig+0x258>
      tickstart = HAL_GetTick();
 8000870:	f7ff fd08 	bl	8000284 <HAL_GetTick>
 8000874:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000876:	4f07      	ldr	r7, [pc, #28]	; (8000894 <HAL_RCC_OscConfig+0x308>)
 8000878:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800087a:	4d0a      	ldr	r5, [pc, #40]	; (80008a4 <HAL_RCC_OscConfig+0x318>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800087c:	6a3b      	ldr	r3, [r7, #32]
 800087e:	421e      	tst	r6, r3
 8000880:	d012      	beq.n	80008a8 <HAL_RCC_OscConfig+0x31c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000882:	f7ff fcff 	bl	8000284 <HAL_GetTick>
 8000886:	464b      	mov	r3, r9
 8000888:	1ac0      	subs	r0, r0, r3
 800088a:	42a8      	cmp	r0, r5
 800088c:	d9f6      	bls.n	800087c <HAL_RCC_OscConfig+0x2f0>
          return HAL_TIMEOUT;
 800088e:	2003      	movs	r0, #3
 8000890:	e6b1      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	40021000 	.word	0x40021000
 8000898:	fffeffff 	.word	0xfffeffff
 800089c:	fffbffff 	.word	0xfffbffff
 80008a0:	40007000 	.word	0x40007000
 80008a4:	00001388 	.word	0x00001388
    if(pwrclkchanged == SET)
 80008a8:	4643      	mov	r3, r8
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d01f      	beq.n	80008ee <HAL_RCC_OscConfig+0x362>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80008ae:	6823      	ldr	r3, [r4, #0]
 80008b0:	06db      	lsls	r3, r3, #27
 80008b2:	d54f      	bpl.n	8000954 <HAL_RCC_OscConfig+0x3c8>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80008b4:	6963      	ldr	r3, [r4, #20]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d01f      	beq.n	80008fa <HAL_RCC_OscConfig+0x36e>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80008ba:	3305      	adds	r3, #5
 80008bc:	d03e      	beq.n	800093c <HAL_RCC_OscConfig+0x3b0>
      __HAL_RCC_HSI14ADC_DISABLE();
 80008be:	4b7c      	ldr	r3, [pc, #496]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 80008c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c2:	2104      	movs	r1, #4
 80008c4:	430a      	orrs	r2, r1
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80008c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ca:	3903      	subs	r1, #3
 80008cc:	438a      	bics	r2, r1
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80008d0:	f7ff fcd8 	bl	8000284 <HAL_GetTick>
 80008d4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80008d6:	4e76      	ldr	r6, [pc, #472]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 80008d8:	2502      	movs	r5, #2
 80008da:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80008dc:	421d      	tst	r5, r3
 80008de:	d039      	beq.n	8000954 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008e0:	f7ff fcd0 	bl	8000284 <HAL_GetTick>
 80008e4:	1bc0      	subs	r0, r0, r7
 80008e6:	2802      	cmp	r0, #2
 80008e8:	d9f7      	bls.n	80008da <HAL_RCC_OscConfig+0x34e>
          return HAL_TIMEOUT;
 80008ea:	2003      	movs	r0, #3
 80008ec:	e683      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008ee:	4a70      	ldr	r2, [pc, #448]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 80008f0:	69d3      	ldr	r3, [r2, #28]
 80008f2:	4970      	ldr	r1, [pc, #448]	; (8000ab4 <HAL_RCC_OscConfig+0x528>)
 80008f4:	400b      	ands	r3, r1
 80008f6:	61d3      	str	r3, [r2, #28]
 80008f8:	e7d9      	b.n	80008ae <HAL_RCC_OscConfig+0x322>
      __HAL_RCC_HSI14ADC_DISABLE();
 80008fa:	4b6d      	ldr	r3, [pc, #436]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 80008fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008fe:	2104      	movs	r1, #4
 8000900:	430a      	orrs	r2, r1
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000906:	3903      	subs	r1, #3
 8000908:	430a      	orrs	r2, r1
 800090a:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 800090c:	f7ff fcba 	bl	8000284 <HAL_GetTick>
 8000910:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000912:	4e67      	ldr	r6, [pc, #412]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 8000914:	2502      	movs	r5, #2
 8000916:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000918:	421d      	tst	r5, r3
 800091a:	d106      	bne.n	800092a <HAL_RCC_OscConfig+0x39e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800091c:	f7ff fcb2 	bl	8000284 <HAL_GetTick>
 8000920:	1bc0      	subs	r0, r0, r7
 8000922:	2802      	cmp	r0, #2
 8000924:	d9f7      	bls.n	8000916 <HAL_RCC_OscConfig+0x38a>
          return HAL_TIMEOUT;
 8000926:	2003      	movs	r0, #3
 8000928:	e665      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800092a:	4961      	ldr	r1, [pc, #388]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 800092c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800092e:	69a3      	ldr	r3, [r4, #24]
 8000930:	00db      	lsls	r3, r3, #3
 8000932:	20f8      	movs	r0, #248	; 0xf8
 8000934:	4382      	bics	r2, r0
 8000936:	4313      	orrs	r3, r2
 8000938:	634b      	str	r3, [r1, #52]	; 0x34
 800093a:	e00b      	b.n	8000954 <HAL_RCC_OscConfig+0x3c8>
      __HAL_RCC_HSI14ADC_ENABLE();
 800093c:	4a5c      	ldr	r2, [pc, #368]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 800093e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000940:	2104      	movs	r1, #4
 8000942:	438b      	bics	r3, r1
 8000944:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000946:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000948:	69a3      	ldr	r3, [r4, #24]
 800094a:	00db      	lsls	r3, r3, #3
 800094c:	20f8      	movs	r0, #248	; 0xf8
 800094e:	4381      	bics	r1, r0
 8000950:	430b      	orrs	r3, r1
 8000952:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000954:	6823      	ldr	r3, [r4, #0]
 8000956:	069b      	lsls	r3, r3, #26
 8000958:	d534      	bpl.n	80009c4 <HAL_RCC_OscConfig+0x438>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800095a:	4b55      	ldr	r3, [pc, #340]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	230c      	movs	r3, #12
 8000960:	4013      	ands	r3, r2
 8000962:	2b0c      	cmp	r3, #12
 8000964:	d025      	beq.n	80009b2 <HAL_RCC_OscConfig+0x426>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000966:	4b52      	ldr	r3, [pc, #328]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	230c      	movs	r3, #12
 800096c:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800096e:	2b08      	cmp	r3, #8
 8000970:	d018      	beq.n	80009a4 <HAL_RCC_OscConfig+0x418>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000972:	6a23      	ldr	r3, [r4, #32]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d047      	beq.n	8000a08 <HAL_RCC_OscConfig+0x47c>
        __HAL_RCC_HSI48_ENABLE();
 8000978:	4a4d      	ldr	r2, [pc, #308]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 800097a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	025b      	lsls	r3, r3, #9
 8000980:	430b      	orrs	r3, r1
 8000982:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000984:	f7ff fc7e 	bl	8000284 <HAL_GetTick>
 8000988:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800098a:	4e49      	ldr	r6, [pc, #292]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 800098c:	2580      	movs	r5, #128	; 0x80
 800098e:	026d      	lsls	r5, r5, #9
 8000990:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000992:	422b      	tst	r3, r5
 8000994:	d116      	bne.n	80009c4 <HAL_RCC_OscConfig+0x438>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000996:	f7ff fc75 	bl	8000284 <HAL_GetTick>
 800099a:	1bc0      	subs	r0, r0, r7
 800099c:	2802      	cmp	r0, #2
 800099e:	d9f7      	bls.n	8000990 <HAL_RCC_OscConfig+0x404>
            return HAL_TIMEOUT;
 80009a0:	2003      	movs	r0, #3
 80009a2:	e628      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80009a4:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	22c0      	movs	r2, #192	; 0xc0
 80009aa:	0252      	lsls	r2, r2, #9
 80009ac:	4013      	ands	r3, r2
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d1df      	bne.n	8000972 <HAL_RCC_OscConfig+0x3e6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 80009b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009b6:	03db      	lsls	r3, r3, #15
 80009b8:	d504      	bpl.n	80009c4 <HAL_RCC_OscConfig+0x438>
        return HAL_ERROR;
 80009ba:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80009bc:	6a23      	ldr	r3, [r4, #32]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d000      	beq.n	80009c4 <HAL_RCC_OscConfig+0x438>
 80009c2:	e618      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 80009c6:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d100      	bne.n	80009ce <HAL_RCC_OscConfig+0x442>
 80009cc:	e613      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 80009d0:	6851      	ldr	r1, [r2, #4]
 80009d2:	220c      	movs	r2, #12
 80009d4:	400a      	ands	r2, r1
 80009d6:	2a08      	cmp	r2, #8
 80009d8:	d068      	beq.n	8000aac <HAL_RCC_OscConfig+0x520>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d029      	beq.n	8000a32 <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_PLL_DISABLE();
 80009de:	4a34      	ldr	r2, [pc, #208]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 80009e0:	6813      	ldr	r3, [r2, #0]
 80009e2:	4935      	ldr	r1, [pc, #212]	; (8000ab8 <HAL_RCC_OscConfig+0x52c>)
 80009e4:	400b      	ands	r3, r1
 80009e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80009e8:	f7ff fc4c 	bl	8000284 <HAL_GetTick>
 80009ec:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009ee:	4d30      	ldr	r5, [pc, #192]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 80009f0:	2480      	movs	r4, #128	; 0x80
 80009f2:	04a4      	lsls	r4, r4, #18
 80009f4:	682b      	ldr	r3, [r5, #0]
 80009f6:	4223      	tst	r3, r4
 80009f8:	d056      	beq.n	8000aa8 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009fa:	f7ff fc43 	bl	8000284 <HAL_GetTick>
 80009fe:	1b80      	subs	r0, r0, r6
 8000a00:	2802      	cmp	r0, #2
 8000a02:	d9f7      	bls.n	80009f4 <HAL_RCC_OscConfig+0x468>
            return HAL_TIMEOUT;
 8000a04:	2003      	movs	r0, #3
 8000a06:	e5f6      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8000a08:	4a29      	ldr	r2, [pc, #164]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 8000a0a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000a0c:	492b      	ldr	r1, [pc, #172]	; (8000abc <HAL_RCC_OscConfig+0x530>)
 8000a0e:	400b      	ands	r3, r1
 8000a10:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8000a12:	f7ff fc37 	bl	8000284 <HAL_GetTick>
 8000a16:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000a18:	4e25      	ldr	r6, [pc, #148]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 8000a1a:	2580      	movs	r5, #128	; 0x80
 8000a1c:	026d      	lsls	r5, r5, #9
 8000a1e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000a20:	422b      	tst	r3, r5
 8000a22:	d0cf      	beq.n	80009c4 <HAL_RCC_OscConfig+0x438>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000a24:	f7ff fc2e 	bl	8000284 <HAL_GetTick>
 8000a28:	1bc0      	subs	r0, r0, r7
 8000a2a:	2802      	cmp	r0, #2
 8000a2c:	d9f7      	bls.n	8000a1e <HAL_RCC_OscConfig+0x492>
            return HAL_TIMEOUT;
 8000a2e:	2003      	movs	r0, #3
 8000a30:	e5e1      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8000a32:	4a1f      	ldr	r2, [pc, #124]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 8000a34:	6813      	ldr	r3, [r2, #0]
 8000a36:	4920      	ldr	r1, [pc, #128]	; (8000ab8 <HAL_RCC_OscConfig+0x52c>)
 8000a38:	400b      	ands	r3, r1
 8000a3a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000a3c:	f7ff fc22 	bl	8000284 <HAL_GetTick>
 8000a40:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a42:	4e1b      	ldr	r6, [pc, #108]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 8000a44:	2580      	movs	r5, #128	; 0x80
 8000a46:	04ad      	lsls	r5, r5, #18
 8000a48:	6833      	ldr	r3, [r6, #0]
 8000a4a:	422b      	tst	r3, r5
 8000a4c:	d006      	beq.n	8000a5c <HAL_RCC_OscConfig+0x4d0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a4e:	f7ff fc19 	bl	8000284 <HAL_GetTick>
 8000a52:	1bc0      	subs	r0, r0, r7
 8000a54:	2802      	cmp	r0, #2
 8000a56:	d9f7      	bls.n	8000a48 <HAL_RCC_OscConfig+0x4bc>
            return HAL_TIMEOUT;
 8000a58:	2003      	movs	r0, #3
 8000a5a:	e5cc      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 8000a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a60:	210f      	movs	r1, #15
 8000a62:	438a      	bics	r2, r1
 8000a64:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000a66:	430a      	orrs	r2, r1
 8000a68:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a6a:	6859      	ldr	r1, [r3, #4]
 8000a6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000a70:	4302      	orrs	r2, r0
 8000a72:	4813      	ldr	r0, [pc, #76]	; (8000ac0 <HAL_RCC_OscConfig+0x534>)
 8000a74:	4001      	ands	r1, r0
 8000a76:	430a      	orrs	r2, r1
 8000a78:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a7a:	6819      	ldr	r1, [r3, #0]
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	0452      	lsls	r2, r2, #17
 8000a80:	430a      	orrs	r2, r1
 8000a82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a84:	f7ff fbfe 	bl	8000284 <HAL_GetTick>
 8000a88:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a8a:	4d09      	ldr	r5, [pc, #36]	; (8000ab0 <HAL_RCC_OscConfig+0x524>)
 8000a8c:	2480      	movs	r4, #128	; 0x80
 8000a8e:	04a4      	lsls	r4, r4, #18
 8000a90:	682b      	ldr	r3, [r5, #0]
 8000a92:	4223      	tst	r3, r4
 8000a94:	d106      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x518>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a96:	f7ff fbf5 	bl	8000284 <HAL_GetTick>
 8000a9a:	1b80      	subs	r0, r0, r6
 8000a9c:	2802      	cmp	r0, #2
 8000a9e:	d9f7      	bls.n	8000a90 <HAL_RCC_OscConfig+0x504>
            return HAL_TIMEOUT;
 8000aa0:	2003      	movs	r0, #3
 8000aa2:	e5a8      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	e5a6      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	e5a4      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8000aac:	2001      	movs	r0, #1
 8000aae:	e5a2      	b.n	80005f6 <HAL_RCC_OscConfig+0x6a>
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	efffffff 	.word	0xefffffff
 8000ab8:	feffffff 	.word	0xfeffffff
 8000abc:	fffeffff 	.word	0xfffeffff
 8000ac0:	ffc27fff 	.word	0xffc27fff

08000ac4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ac4:	b530      	push	{r4, r5, lr}
 8000ac6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ac8:	aa04      	add	r2, sp, #16
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <HAL_RCC_GetSysClockFreq+0x84>)
 8000acc:	0018      	movs	r0, r3
 8000ace:	c832      	ldmia	r0!, {r1, r4, r5}
 8000ad0:	c232      	stmia	r2!, {r1, r4, r5}
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	6802      	ldr	r2, [r0, #0]
 8000ad6:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000ad8:	466a      	mov	r2, sp
 8000ada:	3310      	adds	r3, #16
 8000adc:	cb13      	ldmia	r3!, {r0, r1, r4}
 8000ade:	c213      	stmia	r2!, {r0, r1, r4}
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x88>)
 8000ae6:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ae8:	230c      	movs	r3, #12
 8000aea:	4013      	ands	r3, r2
 8000aec:	2b08      	cmp	r3, #8
 8000aee:	d004      	beq.n	8000afa <HAL_RCC_GetSysClockFreq+0x36>
 8000af0:	2b0c      	cmp	r3, #12
 8000af2:	d126      	bne.n	8000b42 <HAL_RCC_GetSysClockFreq+0x7e>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000af4:	4816      	ldr	r0, [pc, #88]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x8c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000af6:	b009      	add	sp, #36	; 0x24
 8000af8:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000afa:	0c91      	lsrs	r1, r2, #18
 8000afc:	230f      	movs	r3, #15
 8000afe:	4019      	ands	r1, r3
 8000b00:	a804      	add	r0, sp, #16
 8000b02:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000b04:	4911      	ldr	r1, [pc, #68]	; (8000b4c <HAL_RCC_GetSysClockFreq+0x88>)
 8000b06:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000b08:	400b      	ands	r3, r1
 8000b0a:	4669      	mov	r1, sp
 8000b0c:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000b0e:	23c0      	movs	r3, #192	; 0xc0
 8000b10:	025b      	lsls	r3, r3, #9
 8000b12:	401a      	ands	r2, r3
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	025b      	lsls	r3, r3, #9
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d008      	beq.n	8000b2e <HAL_RCC_GetSysClockFreq+0x6a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000b1c:	23c0      	movs	r3, #192	; 0xc0
 8000b1e:	025b      	lsls	r3, r3, #9
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d009      	beq.n	8000b38 <HAL_RCC_GetSysClockFreq+0x74>
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x90>)
 8000b26:	f7ff faf7 	bl	8000118 <__udivsi3>
 8000b2a:	4360      	muls	r0, r4
 8000b2c:	e7e3      	b.n	8000af6 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b2e:	4809      	ldr	r0, [pc, #36]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x90>)
 8000b30:	f7ff faf2 	bl	8000118 <__udivsi3>
 8000b34:	4360      	muls	r0, r4
 8000b36:	e7de      	b.n	8000af6 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000b3a:	f7ff faed 	bl	8000118 <__udivsi3>
 8000b3e:	4360      	muls	r0, r4
 8000b40:	e7d9      	b.n	8000af6 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <HAL_RCC_GetSysClockFreq+0x90>)
  return sysclockfreq;
 8000b44:	e7d7      	b.n	8000af6 <HAL_RCC_GetSysClockFreq+0x32>
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	08002050 	.word	0x08002050
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	02dc6c00 	.word	0x02dc6c00
 8000b54:	007a1200 	.word	0x007a1200

08000b58 <HAL_RCC_ClockConfig>:
{
 8000b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5a:	46ce      	mov	lr, r9
 8000b5c:	4647      	mov	r7, r8
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	0005      	movs	r5, r0
 8000b62:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000b64:	4b5f      	ldr	r3, [pc, #380]	; (8000ce4 <HAL_RCC_ClockConfig+0x18c>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	2301      	movs	r3, #1
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	428b      	cmp	r3, r1
 8000b6e:	d20b      	bcs.n	8000b88 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b70:	495c      	ldr	r1, [pc, #368]	; (8000ce4 <HAL_RCC_ClockConfig+0x18c>)
 8000b72:	680b      	ldr	r3, [r1, #0]
 8000b74:	2201      	movs	r2, #1
 8000b76:	4393      	bics	r3, r2
 8000b78:	4323      	orrs	r3, r4
 8000b7a:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b7c:	680b      	ldr	r3, [r1, #0]
 8000b7e:	401a      	ands	r2, r3
      return HAL_ERROR;
 8000b80:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b82:	4294      	cmp	r4, r2
 8000b84:	d000      	beq.n	8000b88 <HAL_RCC_ClockConfig+0x30>
 8000b86:	e0a8      	b.n	8000cda <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b88:	682b      	ldr	r3, [r5, #0]
 8000b8a:	079b      	lsls	r3, r3, #30
 8000b8c:	d506      	bpl.n	8000b9c <HAL_RCC_ClockConfig+0x44>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b8e:	4a56      	ldr	r2, [pc, #344]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000b90:	6853      	ldr	r3, [r2, #4]
 8000b92:	21f0      	movs	r1, #240	; 0xf0
 8000b94:	438b      	bics	r3, r1
 8000b96:	68a9      	ldr	r1, [r5, #8]
 8000b98:	430b      	orrs	r3, r1
 8000b9a:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	07db      	lsls	r3, r3, #31
 8000ba0:	d571      	bpl.n	8000c86 <HAL_RCC_ClockConfig+0x12e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ba2:	686b      	ldr	r3, [r5, #4]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d029      	beq.n	8000bfc <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ba8:	2b02      	cmp	r3, #2
 8000baa:	d02d      	beq.n	8000c08 <HAL_RCC_ClockConfig+0xb0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	d031      	beq.n	8000c14 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb0:	4a4d      	ldr	r2, [pc, #308]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000bb2:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8000bb4:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb6:	0792      	lsls	r2, r2, #30
 8000bb8:	d400      	bmi.n	8000bbc <HAL_RCC_ClockConfig+0x64>
 8000bba:	e08e      	b.n	8000cda <HAL_RCC_ClockConfig+0x182>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bbc:	494a      	ldr	r1, [pc, #296]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000bbe:	684a      	ldr	r2, [r1, #4]
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	4382      	bics	r2, r0
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000bc8:	f7ff fb5c 	bl	8000284 <HAL_GetTick>
 8000bcc:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bce:	686b      	ldr	r3, [r5, #4]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d025      	beq.n	8000c20 <HAL_RCC_ClockConfig+0xc8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d034      	beq.n	8000c42 <HAL_RCC_ClockConfig+0xea>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000bd8:	2b03      	cmp	r3, #3
 8000bda:	d043      	beq.n	8000c64 <HAL_RCC_ClockConfig+0x10c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bdc:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000bde:	4698      	mov	r8, r3
 8000be0:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000be2:	4b42      	ldr	r3, [pc, #264]	; (8000cec <HAL_RCC_ClockConfig+0x194>)
 8000be4:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be6:	4643      	mov	r3, r8
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	421f      	tst	r7, r3
 8000bec:	d04b      	beq.n	8000c86 <HAL_RCC_ClockConfig+0x12e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bee:	f7ff fb49 	bl	8000284 <HAL_GetTick>
 8000bf2:	1b80      	subs	r0, r0, r6
 8000bf4:	4548      	cmp	r0, r9
 8000bf6:	d9f6      	bls.n	8000be6 <HAL_RCC_ClockConfig+0x8e>
          return HAL_TIMEOUT;
 8000bf8:	2003      	movs	r0, #3
 8000bfa:	e06e      	b.n	8000cda <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfc:	4a3a      	ldr	r2, [pc, #232]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000bfe:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8000c00:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c02:	0392      	lsls	r2, r2, #14
 8000c04:	d4da      	bmi.n	8000bbc <HAL_RCC_ClockConfig+0x64>
 8000c06:	e068      	b.n	8000cda <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c08:	4a37      	ldr	r2, [pc, #220]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000c0a:	6812      	ldr	r2, [r2, #0]
        return HAL_ERROR;
 8000c0c:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c0e:	0192      	lsls	r2, r2, #6
 8000c10:	d4d4      	bmi.n	8000bbc <HAL_RCC_ClockConfig+0x64>
 8000c12:	e062      	b.n	8000cda <HAL_RCC_ClockConfig+0x182>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000c14:	4a34      	ldr	r2, [pc, #208]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000c16:	6b52      	ldr	r2, [r2, #52]	; 0x34
        return HAL_ERROR;
 8000c18:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000c1a:	03d2      	lsls	r2, r2, #15
 8000c1c:	d4ce      	bmi.n	8000bbc <HAL_RCC_ClockConfig+0x64>
 8000c1e:	e05c      	b.n	8000cda <HAL_RCC_ClockConfig+0x182>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000c22:	4698      	mov	r8, r3
 8000c24:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c26:	4b31      	ldr	r3, [pc, #196]	; (8000cec <HAL_RCC_ClockConfig+0x194>)
 8000c28:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c2a:	4643      	mov	r3, r8
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	403b      	ands	r3, r7
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d028      	beq.n	8000c86 <HAL_RCC_ClockConfig+0x12e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c34:	f7ff fb26 	bl	8000284 <HAL_GetTick>
 8000c38:	1b80      	subs	r0, r0, r6
 8000c3a:	4548      	cmp	r0, r9
 8000c3c:	d9f5      	bls.n	8000c2a <HAL_RCC_ClockConfig+0xd2>
          return HAL_TIMEOUT;
 8000c3e:	2003      	movs	r0, #3
 8000c40:	e04b      	b.n	8000cda <HAL_RCC_ClockConfig+0x182>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c42:	4b29      	ldr	r3, [pc, #164]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000c44:	4698      	mov	r8, r3
 8000c46:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c48:	4b28      	ldr	r3, [pc, #160]	; (8000cec <HAL_RCC_ClockConfig+0x194>)
 8000c4a:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	403b      	ands	r3, r7
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d017      	beq.n	8000c86 <HAL_RCC_ClockConfig+0x12e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c56:	f7ff fb15 	bl	8000284 <HAL_GetTick>
 8000c5a:	1b80      	subs	r0, r0, r6
 8000c5c:	4548      	cmp	r0, r9
 8000c5e:	d9f5      	bls.n	8000c4c <HAL_RCC_ClockConfig+0xf4>
          return HAL_TIMEOUT;
 8000c60:	2003      	movs	r0, #3
 8000c62:	e03a      	b.n	8000cda <HAL_RCC_ClockConfig+0x182>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000c64:	4b20      	ldr	r3, [pc, #128]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000c66:	4698      	mov	r8, r3
 8000c68:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c6a:	4b20      	ldr	r3, [pc, #128]	; (8000cec <HAL_RCC_ClockConfig+0x194>)
 8000c6c:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8000c6e:	4643      	mov	r3, r8
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	403b      	ands	r3, r7
 8000c74:	2b0c      	cmp	r3, #12
 8000c76:	d006      	beq.n	8000c86 <HAL_RCC_ClockConfig+0x12e>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c78:	f7ff fb04 	bl	8000284 <HAL_GetTick>
 8000c7c:	1b80      	subs	r0, r0, r6
 8000c7e:	4548      	cmp	r0, r9
 8000c80:	d9f5      	bls.n	8000c6e <HAL_RCC_ClockConfig+0x116>
          return HAL_TIMEOUT;
 8000c82:	2003      	movs	r0, #3
 8000c84:	e029      	b.n	8000cda <HAL_RCC_ClockConfig+0x182>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <HAL_RCC_ClockConfig+0x18c>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	429c      	cmp	r4, r3
 8000c90:	d20a      	bcs.n	8000ca8 <HAL_RCC_ClockConfig+0x150>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c92:	4914      	ldr	r1, [pc, #80]	; (8000ce4 <HAL_RCC_ClockConfig+0x18c>)
 8000c94:	680b      	ldr	r3, [r1, #0]
 8000c96:	2201      	movs	r2, #1
 8000c98:	4393      	bics	r3, r2
 8000c9a:	4323      	orrs	r3, r4
 8000c9c:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c9e:	680b      	ldr	r3, [r1, #0]
 8000ca0:	401a      	ands	r2, r3
      return HAL_ERROR;
 8000ca2:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ca4:	4294      	cmp	r4, r2
 8000ca6:	d118      	bne.n	8000cda <HAL_RCC_ClockConfig+0x182>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca8:	682b      	ldr	r3, [r5, #0]
 8000caa:	075b      	lsls	r3, r3, #29
 8000cac:	d506      	bpl.n	8000cbc <HAL_RCC_ClockConfig+0x164>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000cae:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000cb0:	6853      	ldr	r3, [r2, #4]
 8000cb2:	490f      	ldr	r1, [pc, #60]	; (8000cf0 <HAL_RCC_ClockConfig+0x198>)
 8000cb4:	400b      	ands	r3, r1
 8000cb6:	68e9      	ldr	r1, [r5, #12]
 8000cb8:	430b      	orrs	r3, r1
 8000cba:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000cbc:	f7ff ff02 	bl	8000ac4 <HAL_RCC_GetSysClockFreq>
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_RCC_ClockConfig+0x190>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	061b      	lsls	r3, r3, #24
 8000cc6:	0f1b      	lsrs	r3, r3, #28
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_RCC_ClockConfig+0x19c>)
 8000cca:	5cd3      	ldrb	r3, [r2, r3]
 8000ccc:	40d8      	lsrs	r0, r3
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <HAL_RCC_ClockConfig+0x1a0>)
 8000cd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff faac 	bl	8000230 <HAL_InitTick>
  return HAL_OK;
 8000cd8:	2000      	movs	r0, #0
}
 8000cda:	bc0c      	pop	{r2, r3}
 8000cdc:	4690      	mov	r8, r2
 8000cde:	4699      	mov	r9, r3
 8000ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	40022000 	.word	0x40022000
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	00001388 	.word	0x00001388
 8000cf0:	fffff8ff 	.word	0xfffff8ff
 8000cf4:	08002070 	.word	0x08002070
 8000cf8:	20000070 	.word	0x20000070

08000cfc <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000cfc:	4b01      	ldr	r3, [pc, #4]	; (8000d04 <HAL_RCC_GetHCLKFreq+0x8>)
 8000cfe:	6818      	ldr	r0, [r3, #0]
}
 8000d00:	4770      	bx	lr
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	20000070 	.word	0x20000070

08000d08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000d08:	4b04      	ldr	r3, [pc, #16]	; (8000d1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	055b      	lsls	r3, r3, #21
 8000d0e:	0f5b      	lsrs	r3, r3, #29
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d16:	6810      	ldr	r0, [r2, #0]
 8000d18:	40d8      	lsrs	r0, r3
}    
 8000d1a:	4770      	bx	lr
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	08002080 	.word	0x08002080
 8000d24:	20000070 	.word	0x20000070

08000d28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2a:	46ce      	mov	lr, r9
 8000d2c:	4647      	mov	r7, r8
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b083      	sub	sp, #12
 8000d32:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d34:	6803      	ldr	r3, [r0, #0]
 8000d36:	03db      	lsls	r3, r3, #15
 8000d38:	d536      	bpl.n	8000da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3a:	4b4e      	ldr	r3, [pc, #312]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000d3e:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	d40a      	bmi.n	8000d5a <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	4a4b      	ldr	r2, [pc, #300]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000d46:	69d1      	ldr	r1, [r2, #28]
 8000d48:	2080      	movs	r0, #128	; 0x80
 8000d4a:	0540      	lsls	r0, r0, #21
 8000d4c:	4301      	orrs	r1, r0
 8000d4e:	61d1      	str	r1, [r2, #28]
 8000d50:	69d3      	ldr	r3, [r2, #28]
 8000d52:	4003      	ands	r3, r0
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d58:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d5a:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	05db      	lsls	r3, r3, #23
 8000d60:	d55a      	bpl.n	8000e18 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d62:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000d64:	6a1b      	ldr	r3, [r3, #32]
 8000d66:	22c0      	movs	r2, #192	; 0xc0
 8000d68:	0092      	lsls	r2, r2, #2
 8000d6a:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d6c:	d013      	beq.n	8000d96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8000d6e:	6861      	ldr	r1, [r4, #4]
 8000d70:	400a      	ands	r2, r1
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00f      	beq.n	8000d96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000d76:	4b3f      	ldr	r3, [pc, #252]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000d78:	6a18      	ldr	r0, [r3, #32]
 8000d7a:	4a40      	ldr	r2, [pc, #256]	; (8000e7c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8000d7c:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000d7e:	6a1e      	ldr	r6, [r3, #32]
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0249      	lsls	r1, r1, #9
 8000d84:	4331      	orrs	r1, r6
 8000d86:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000d88:	6a19      	ldr	r1, [r3, #32]
 8000d8a:	4e3d      	ldr	r6, [pc, #244]	; (8000e80 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8000d8c:	4031      	ands	r1, r6
 8000d8e:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8000d90:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d92:	07c3      	lsls	r3, r0, #31
 8000d94:	d457      	bmi.n	8000e46 <HAL_RCCEx_PeriphCLKConfig+0x11e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000d96:	4a37      	ldr	r2, [pc, #220]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000d98:	6a13      	ldr	r3, [r2, #32]
 8000d9a:	4938      	ldr	r1, [pc, #224]	; (8000e7c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	6861      	ldr	r1, [r4, #4]
 8000da0:	430b      	orrs	r3, r1
 8000da2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000da4:	2d01      	cmp	r5, #1
 8000da6:	d060      	beq.n	8000e6a <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	07db      	lsls	r3, r3, #31
 8000dac:	d506      	bpl.n	8000dbc <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000dae:	4a31      	ldr	r2, [pc, #196]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000db0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000db2:	2103      	movs	r1, #3
 8000db4:	438b      	bics	r3, r1
 8000db6:	68a1      	ldr	r1, [r4, #8]
 8000db8:	430b      	orrs	r3, r1
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	079b      	lsls	r3, r3, #30
 8000dc0:	d506      	bpl.n	8000dd0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000dc2:	4a2c      	ldr	r2, [pc, #176]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000dc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dc6:	492f      	ldr	r1, [pc, #188]	; (8000e84 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8000dc8:	400b      	ands	r3, r1
 8000dca:	68e1      	ldr	r1, [r4, #12]
 8000dcc:	430b      	orrs	r3, r1
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000dd0:	6823      	ldr	r3, [r4, #0]
 8000dd2:	069b      	lsls	r3, r3, #26
 8000dd4:	d506      	bpl.n	8000de4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000dd6:	4a27      	ldr	r2, [pc, #156]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000dd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dda:	2110      	movs	r1, #16
 8000ddc:	438b      	bics	r3, r1
 8000dde:	6921      	ldr	r1, [r4, #16]
 8000de0:	430b      	orrs	r3, r1
 8000de2:	6313      	str	r3, [r2, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000de4:	6823      	ldr	r3, [r4, #0]
 8000de6:	039b      	lsls	r3, r3, #14
 8000de8:	d506      	bpl.n	8000df8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000dec:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dee:	2180      	movs	r1, #128	; 0x80
 8000df0:	438b      	bics	r3, r1
 8000df2:	69a1      	ldr	r1, [r4, #24]
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000df8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	055b      	lsls	r3, r3, #21
 8000dfe:	d506      	bpl.n	8000e0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8000e00:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000e02:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000e04:	2140      	movs	r1, #64	; 0x40
 8000e06:	438b      	bics	r3, r1
 8000e08:	6961      	ldr	r1, [r4, #20]
 8000e0a:	430b      	orrs	r3, r1
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000e0e:	b003      	add	sp, #12
 8000e10:	bc0c      	pop	{r2, r3}
 8000e12:	4690      	mov	r8, r2
 8000e14:	4699      	mov	r9, r3
 8000e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e18:	4a17      	ldr	r2, [pc, #92]	; (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000e1a:	6811      	ldr	r1, [r2, #0]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	430b      	orrs	r3, r1
 8000e22:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000e24:	f7ff fa2e 	bl	8000284 <HAL_GetTick>
 8000e28:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e2a:	4f13      	ldr	r7, [pc, #76]	; (8000e78 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000e2c:	2680      	movs	r6, #128	; 0x80
 8000e2e:	0076      	lsls	r6, r6, #1
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	4233      	tst	r3, r6
 8000e34:	d195      	bne.n	8000d62 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e36:	f7ff fa25 	bl	8000284 <HAL_GetTick>
 8000e3a:	4643      	mov	r3, r8
 8000e3c:	1ac0      	subs	r0, r0, r3
 8000e3e:	2864      	cmp	r0, #100	; 0x64
 8000e40:	d9f6      	bls.n	8000e30 <HAL_RCCEx_PeriphCLKConfig+0x108>
          return HAL_TIMEOUT;
 8000e42:	2003      	movs	r0, #3
 8000e44:	e7e3      	b.n	8000e0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8000e46:	f7ff fa1d 	bl	8000284 <HAL_GetTick>
 8000e4a:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e4c:	4f09      	ldr	r7, [pc, #36]	; (8000e74 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000e4e:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000e52:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e54:	6a3b      	ldr	r3, [r7, #32]
 8000e56:	421e      	tst	r6, r3
 8000e58:	d19d      	bne.n	8000d96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e5a:	f7ff fa13 	bl	8000284 <HAL_GetTick>
 8000e5e:	464b      	mov	r3, r9
 8000e60:	1ac0      	subs	r0, r0, r3
 8000e62:	4540      	cmp	r0, r8
 8000e64:	d9f6      	bls.n	8000e54 <HAL_RCCEx_PeriphCLKConfig+0x12c>
            return HAL_TIMEOUT;
 8000e66:	2003      	movs	r0, #3
 8000e68:	e7d1      	b.n	8000e0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e6a:	69d3      	ldr	r3, [r2, #28]
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000e6e:	400b      	ands	r3, r1
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	e799      	b.n	8000da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40007000 	.word	0x40007000
 8000e7c:	fffffcff 	.word	0xfffffcff
 8000e80:	fffeffff 	.word	0xfffeffff
 8000e84:	fffcffff 	.word	0xfffcffff
 8000e88:	00001388 	.word	0x00001388
 8000e8c:	efffffff 	.word	0xefffffff

08000e90 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000e90:	6802      	ldr	r2, [r0, #0]
 8000e92:	6813      	ldr	r3, [r2, #0]
 8000e94:	4906      	ldr	r1, [pc, #24]	; (8000eb0 <UART_EndRxTransfer+0x20>)
 8000e96:	400b      	ands	r3, r1
 8000e98:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000e9a:	6802      	ldr	r2, [r0, #0]
 8000e9c:	6893      	ldr	r3, [r2, #8]
 8000e9e:	3123      	adds	r1, #35	; 0x23
 8000ea0:	31ff      	adds	r1, #255	; 0xff
 8000ea2:	438b      	bics	r3, r1
 8000ea4:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000ea6:	2220      	movs	r2, #32
 8000ea8:	236a      	movs	r3, #106	; 0x6a
 8000eaa:	54c2      	strb	r2, [r0, r3]
}
 8000eac:	4770      	bx	lr
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	fffffedf 	.word	0xfffffedf

08000eb4 <HAL_UART_ErrorCallback>:
}
 8000eb4:	4770      	bx	lr

08000eb6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000eb6:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8000eb8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	225a      	movs	r2, #90	; 0x5a
 8000ebe:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8000ec0:	3a08      	subs	r2, #8
 8000ec2:	5283      	strh	r3, [r0, r2]

  HAL_UART_ErrorCallback(huart);
 8000ec4:	f7ff fff6 	bl	8000eb4 <HAL_UART_ErrorCallback>
}
 8000ec8:	bd10      	pop	{r4, pc}
	...

08000ecc <UART_SetConfig>:
{
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ed0:	6801      	ldr	r1, [r0, #0]
 8000ed2:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000ed4:	6883      	ldr	r3, [r0, #8]
 8000ed6:	6900      	ldr	r0, [r0, #16]
 8000ed8:	4303      	orrs	r3, r0
 8000eda:	6960      	ldr	r0, [r4, #20]
 8000edc:	4303      	orrs	r3, r0
 8000ede:	69e0      	ldr	r0, [r4, #28]
 8000ee0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ee2:	4871      	ldr	r0, [pc, #452]	; (80010a8 <UART_SetConfig+0x1dc>)
 8000ee4:	4002      	ands	r2, r0
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000eea:	6822      	ldr	r2, [r4, #0]
 8000eec:	6853      	ldr	r3, [r2, #4]
 8000eee:	496f      	ldr	r1, [pc, #444]	; (80010ac <UART_SetConfig+0x1e0>)
 8000ef0:	400b      	ands	r3, r1
 8000ef2:	68e1      	ldr	r1, [r4, #12]
 8000ef4:	430b      	orrs	r3, r1
 8000ef6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ef8:	6821      	ldr	r1, [r4, #0]
 8000efa:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000efc:	69a3      	ldr	r3, [r4, #24]
 8000efe:	6a20      	ldr	r0, [r4, #32]
 8000f00:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f02:	486b      	ldr	r0, [pc, #428]	; (80010b0 <UART_SetConfig+0x1e4>)
 8000f04:	4002      	ands	r2, r0
 8000f06:	4313      	orrs	r3, r2
 8000f08:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f0a:	6825      	ldr	r5, [r4, #0]
 8000f0c:	4b69      	ldr	r3, [pc, #420]	; (80010b4 <UART_SetConfig+0x1e8>)
 8000f0e:	429d      	cmp	r5, r3
 8000f10:	d01c      	beq.n	8000f4c <UART_SetConfig+0x80>
 8000f12:	4b69      	ldr	r3, [pc, #420]	; (80010b8 <UART_SetConfig+0x1ec>)
 8000f14:	429d      	cmp	r5, r3
 8000f16:	d02d      	beq.n	8000f74 <UART_SetConfig+0xa8>
 8000f18:	4b68      	ldr	r3, [pc, #416]	; (80010bc <UART_SetConfig+0x1f0>)
 8000f1a:	429d      	cmp	r5, r3
 8000f1c:	d100      	bne.n	8000f20 <UART_SetConfig+0x54>
 8000f1e:	e0b2      	b.n	8001086 <UART_SetConfig+0x1ba>
 8000f20:	4b67      	ldr	r3, [pc, #412]	; (80010c0 <UART_SetConfig+0x1f4>)
 8000f22:	429d      	cmp	r5, r3
 8000f24:	d100      	bne.n	8000f28 <UART_SetConfig+0x5c>
 8000f26:	e0ae      	b.n	8001086 <UART_SetConfig+0x1ba>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	69e2      	ldr	r2, [r4, #28]
        ret = HAL_ERROR;
 8000f2e:	2001      	movs	r0, #1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d10a      	bne.n	8000f4a <UART_SetConfig+0x7e>
        ret = HAL_ERROR;
 8000f34:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000f36:	2300      	movs	r3, #0
    brrtemp = usartdiv & 0xFFF0U;
 8000f38:	220f      	movs	r2, #15
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	4391      	bics	r1, r2
 8000f3e:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8000f40:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000f42:	071b      	lsls	r3, r3, #28
 8000f44:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000f46:	4313      	orrs	r3, r2
 8000f48:	60cb      	str	r3, [r1, #12]
}
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f4c:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <UART_SetConfig+0x1f8>)
 8000f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f50:	2303      	movs	r3, #3
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d073      	beq.n	8001040 <UART_SetConfig+0x174>
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d030      	beq.n	8000fbe <UART_SetConfig+0xf2>
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	d100      	bne.n	8000f62 <UART_SetConfig+0x96>
 8000f60:	e07f      	b.n	8001062 <UART_SetConfig+0x196>
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d018      	beq.n	8000f98 <UART_SetConfig+0xcc>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	021b      	lsls	r3, r3, #8
 8000f6a:	69e2      	ldr	r2, [r4, #28]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d042      	beq.n	8000ff6 <UART_SetConfig+0x12a>
        ret = HAL_ERROR;
 8000f70:	2001      	movs	r0, #1
 8000f72:	e7ea      	b.n	8000f4a <UART_SetConfig+0x7e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f74:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <UART_SetConfig+0x1f8>)
 8000f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f78:	22c0      	movs	r2, #192	; 0xc0
 8000f7a:	0292      	lsls	r2, r2, #10
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	0252      	lsls	r2, r2, #9
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d03a      	beq.n	8000ffc <UART_SetConfig+0x130>
 8000f86:	d918      	bls.n	8000fba <UART_SetConfig+0xee>
 8000f88:	2280      	movs	r2, #128	; 0x80
 8000f8a:	0292      	lsls	r2, r2, #10
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d046      	beq.n	800101e <UART_SetConfig+0x152>
 8000f90:	22c0      	movs	r2, #192	; 0xc0
 8000f92:	0292      	lsls	r2, r2, #10
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d1e6      	bne.n	8000f66 <UART_SetConfig+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	69e2      	ldr	r2, [r4, #28]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d01e      	beq.n	8000fe0 <UART_SetConfig+0x114>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000fa2:	6861      	ldr	r1, [r4, #4]
 8000fa4:	0848      	lsrs	r0, r1, #1
 8000fa6:	4b48      	ldr	r3, [pc, #288]	; (80010c8 <UART_SetConfig+0x1fc>)
 8000fa8:	469c      	mov	ip, r3
 8000faa:	4460      	add	r0, ip
 8000fac:	f7ff f8b4 	bl	8000118 <__udivsi3>
 8000fb0:	0400      	lsls	r0, r0, #16
 8000fb2:	0c00      	lsrs	r0, r0, #16
 8000fb4:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000fb6:	2000      	movs	r0, #0
  return ret;
 8000fb8:	e7c7      	b.n	8000f4a <UART_SetConfig+0x7e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1d3      	bne.n	8000f66 <UART_SetConfig+0x9a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fbe:	2380      	movs	r3, #128	; 0x80
 8000fc0:	021b      	lsls	r3, r3, #8
 8000fc2:	69e2      	ldr	r2, [r4, #28]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d163      	bne.n	8001090 <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000fc8:	f7ff fe9e 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 8000fcc:	0040      	lsls	r0, r0, #1
 8000fce:	6863      	ldr	r3, [r4, #4]
 8000fd0:	085b      	lsrs	r3, r3, #1
 8000fd2:	18c0      	adds	r0, r0, r3
 8000fd4:	6861      	ldr	r1, [r4, #4]
 8000fd6:	f7ff f89f 	bl	8000118 <__udivsi3>
 8000fda:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000fdc:	2000      	movs	r0, #0
        break;
 8000fde:	e7ab      	b.n	8000f38 <UART_SetConfig+0x6c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	0858      	lsrs	r0, r3, #1
 8000fe4:	4b39      	ldr	r3, [pc, #228]	; (80010cc <UART_SetConfig+0x200>)
 8000fe6:	469c      	mov	ip, r3
 8000fe8:	4460      	add	r0, ip
 8000fea:	6861      	ldr	r1, [r4, #4]
 8000fec:	f7ff f894 	bl	8000118 <__udivsi3>
 8000ff0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000ff2:	2000      	movs	r0, #0
        break;
 8000ff4:	e7a0      	b.n	8000f38 <UART_SetConfig+0x6c>
        ret = HAL_ERROR;
 8000ff6:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e79d      	b.n	8000f38 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	69e2      	ldr	r2, [r4, #28]
 8001002:	429a      	cmp	r2, r3
 8001004:	d121      	bne.n	800104a <UART_SetConfig+0x17e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001006:	f7ff fd5d 	bl	8000ac4 <HAL_RCC_GetSysClockFreq>
 800100a:	0040      	lsls	r0, r0, #1
 800100c:	6863      	ldr	r3, [r4, #4]
 800100e:	085b      	lsrs	r3, r3, #1
 8001010:	18c0      	adds	r0, r0, r3
 8001012:	6861      	ldr	r1, [r4, #4]
 8001014:	f7ff f880 	bl	8000118 <__udivsi3>
 8001018:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800101a:	2000      	movs	r0, #0
        break;
 800101c:	e78c      	b.n	8000f38 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800101e:	2380      	movs	r3, #128	; 0x80
 8001020:	021b      	lsls	r3, r3, #8
 8001022:	69e2      	ldr	r2, [r4, #28]
 8001024:	429a      	cmp	r2, r3
 8001026:	d121      	bne.n	800106c <UART_SetConfig+0x1a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001028:	6863      	ldr	r3, [r4, #4]
 800102a:	0858      	lsrs	r0, r3, #1
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	025b      	lsls	r3, r3, #9
 8001030:	469c      	mov	ip, r3
 8001032:	4460      	add	r0, ip
 8001034:	6861      	ldr	r1, [r4, #4]
 8001036:	f7ff f86f 	bl	8000118 <__udivsi3>
 800103a:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800103c:	2000      	movs	r0, #0
        break;
 800103e:	e77b      	b.n	8000f38 <UART_SetConfig+0x6c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	69e2      	ldr	r2, [r4, #28]
 8001046:	429a      	cmp	r2, r3
 8001048:	d0dd      	beq.n	8001006 <UART_SetConfig+0x13a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800104a:	f7ff fd3b 	bl	8000ac4 <HAL_RCC_GetSysClockFreq>
 800104e:	6861      	ldr	r1, [r4, #4]
 8001050:	084b      	lsrs	r3, r1, #1
 8001052:	1818      	adds	r0, r3, r0
 8001054:	f7ff f860 	bl	8000118 <__udivsi3>
 8001058:	0400      	lsls	r0, r0, #16
 800105a:	0c00      	lsrs	r0, r0, #16
 800105c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800105e:	2000      	movs	r0, #0
        break;
 8001060:	e773      	b.n	8000f4a <UART_SetConfig+0x7e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	021b      	lsls	r3, r3, #8
 8001066:	69e2      	ldr	r2, [r4, #28]
 8001068:	429a      	cmp	r2, r3
 800106a:	d0dd      	beq.n	8001028 <UART_SetConfig+0x15c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800106c:	6861      	ldr	r1, [r4, #4]
 800106e:	0848      	lsrs	r0, r1, #1
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	469c      	mov	ip, r3
 8001076:	4460      	add	r0, ip
 8001078:	f7ff f84e 	bl	8000118 <__udivsi3>
 800107c:	0400      	lsls	r0, r0, #16
 800107e:	0c00      	lsrs	r0, r0, #16
 8001080:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001082:	2000      	movs	r0, #0
        break;
 8001084:	e761      	b.n	8000f4a <UART_SetConfig+0x7e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	69e2      	ldr	r2, [r4, #28]
 800108c:	429a      	cmp	r2, r3
 800108e:	d09b      	beq.n	8000fc8 <UART_SetConfig+0xfc>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001090:	f7ff fe3a 	bl	8000d08 <HAL_RCC_GetPCLK1Freq>
 8001094:	6861      	ldr	r1, [r4, #4]
 8001096:	084b      	lsrs	r3, r1, #1
 8001098:	1818      	adds	r0, r3, r0
 800109a:	f7ff f83d 	bl	8000118 <__udivsi3>
 800109e:	0400      	lsls	r0, r0, #16
 80010a0:	0c00      	lsrs	r0, r0, #16
 80010a2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80010a4:	2000      	movs	r0, #0
        break;
 80010a6:	e750      	b.n	8000f4a <UART_SetConfig+0x7e>
 80010a8:	efff69f3 	.word	0xefff69f3
 80010ac:	ffffcfff 	.word	0xffffcfff
 80010b0:	fffff4ff 	.word	0xfffff4ff
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40004400 	.word	0x40004400
 80010bc:	40004800 	.word	0x40004800
 80010c0:	40004c00 	.word	0x40004c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	007a1200 	.word	0x007a1200
 80010cc:	00f42400 	.word	0x00f42400

080010d0 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80010d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010d2:	07db      	lsls	r3, r3, #31
 80010d4:	d506      	bpl.n	80010e4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80010d6:	6802      	ldr	r2, [r0, #0]
 80010d8:	6853      	ldr	r3, [r2, #4]
 80010da:	492c      	ldr	r1, [pc, #176]	; (800118c <UART_AdvFeatureConfig+0xbc>)
 80010dc:	400b      	ands	r3, r1
 80010de:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80010e0:	430b      	orrs	r3, r1
 80010e2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80010e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010e6:	079b      	lsls	r3, r3, #30
 80010e8:	d506      	bpl.n	80010f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80010ea:	6802      	ldr	r2, [r0, #0]
 80010ec:	6853      	ldr	r3, [r2, #4]
 80010ee:	4928      	ldr	r1, [pc, #160]	; (8001190 <UART_AdvFeatureConfig+0xc0>)
 80010f0:	400b      	ands	r3, r1
 80010f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80010f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80010fa:	075b      	lsls	r3, r3, #29
 80010fc:	d506      	bpl.n	800110c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80010fe:	6802      	ldr	r2, [r0, #0]
 8001100:	6853      	ldr	r3, [r2, #4]
 8001102:	4924      	ldr	r1, [pc, #144]	; (8001194 <UART_AdvFeatureConfig+0xc4>)
 8001104:	400b      	ands	r3, r1
 8001106:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001108:	430b      	orrs	r3, r1
 800110a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800110c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800110e:	071b      	lsls	r3, r3, #28
 8001110:	d506      	bpl.n	8001120 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001112:	6802      	ldr	r2, [r0, #0]
 8001114:	6853      	ldr	r3, [r2, #4]
 8001116:	4920      	ldr	r1, [pc, #128]	; (8001198 <UART_AdvFeatureConfig+0xc8>)
 8001118:	400b      	ands	r3, r1
 800111a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800111c:	430b      	orrs	r3, r1
 800111e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001120:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001122:	06db      	lsls	r3, r3, #27
 8001124:	d506      	bpl.n	8001134 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001126:	6802      	ldr	r2, [r0, #0]
 8001128:	6893      	ldr	r3, [r2, #8]
 800112a:	491c      	ldr	r1, [pc, #112]	; (800119c <UART_AdvFeatureConfig+0xcc>)
 800112c:	400b      	ands	r3, r1
 800112e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001130:	430b      	orrs	r3, r1
 8001132:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001134:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001136:	069b      	lsls	r3, r3, #26
 8001138:	d506      	bpl.n	8001148 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800113a:	6802      	ldr	r2, [r0, #0]
 800113c:	6893      	ldr	r3, [r2, #8]
 800113e:	4918      	ldr	r1, [pc, #96]	; (80011a0 <UART_AdvFeatureConfig+0xd0>)
 8001140:	400b      	ands	r3, r1
 8001142:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001144:	430b      	orrs	r3, r1
 8001146:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001148:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800114a:	065b      	lsls	r3, r3, #25
 800114c:	d50b      	bpl.n	8001166 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800114e:	6802      	ldr	r2, [r0, #0]
 8001150:	6853      	ldr	r3, [r2, #4]
 8001152:	4914      	ldr	r1, [pc, #80]	; (80011a4 <UART_AdvFeatureConfig+0xd4>)
 8001154:	400b      	ands	r3, r1
 8001156:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001158:	430b      	orrs	r3, r1
 800115a:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	035b      	lsls	r3, r3, #13
 8001160:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001162:	429a      	cmp	r2, r3
 8001164:	d00a      	beq.n	800117c <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001166:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001168:	061b      	lsls	r3, r3, #24
 800116a:	d506      	bpl.n	800117a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800116c:	6802      	ldr	r2, [r0, #0]
 800116e:	6853      	ldr	r3, [r2, #4]
 8001170:	490d      	ldr	r1, [pc, #52]	; (80011a8 <UART_AdvFeatureConfig+0xd8>)
 8001172:	400b      	ands	r3, r1
 8001174:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001176:	430b      	orrs	r3, r1
 8001178:	6053      	str	r3, [r2, #4]
}
 800117a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800117c:	6802      	ldr	r2, [r0, #0]
 800117e:	6853      	ldr	r3, [r2, #4]
 8001180:	490a      	ldr	r1, [pc, #40]	; (80011ac <UART_AdvFeatureConfig+0xdc>)
 8001182:	400b      	ands	r3, r1
 8001184:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001186:	430b      	orrs	r3, r1
 8001188:	6053      	str	r3, [r2, #4]
 800118a:	e7ec      	b.n	8001166 <UART_AdvFeatureConfig+0x96>
 800118c:	fffdffff 	.word	0xfffdffff
 8001190:	fffeffff 	.word	0xfffeffff
 8001194:	fffbffff 	.word	0xfffbffff
 8001198:	ffff7fff 	.word	0xffff7fff
 800119c:	ffffefff 	.word	0xffffefff
 80011a0:	ffffdfff 	.word	0xffffdfff
 80011a4:	ffefffff 	.word	0xffefffff
 80011a8:	fff7ffff 	.word	0xfff7ffff
 80011ac:	ff9fffff 	.word	0xff9fffff

080011b0 <UART_WaitOnFlagUntilTimeout>:
{
 80011b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b2:	46c6      	mov	lr, r8
 80011b4:	b500      	push	{lr}
 80011b6:	0007      	movs	r7, r0
 80011b8:	000c      	movs	r4, r1
 80011ba:	0016      	movs	r6, r2
 80011bc:	4698      	mov	r8, r3
 80011be:	9d06      	ldr	r5, [sp, #24]
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	69d3      	ldr	r3, [r2, #28]
 80011c4:	4023      	ands	r3, r4
 80011c6:	1b1b      	subs	r3, r3, r4
 80011c8:	4259      	negs	r1, r3
 80011ca:	414b      	adcs	r3, r1
 80011cc:	42b3      	cmp	r3, r6
 80011ce:	d11e      	bne.n	800120e <UART_WaitOnFlagUntilTimeout+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 80011d0:	1c6b      	adds	r3, r5, #1
 80011d2:	d0f6      	beq.n	80011c2 <UART_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011d4:	2d00      	cmp	r5, #0
 80011d6:	d005      	beq.n	80011e4 <UART_WaitOnFlagUntilTimeout+0x34>
 80011d8:	f7ff f854 	bl	8000284 <HAL_GetTick>
 80011dc:	4643      	mov	r3, r8
 80011de:	1ac0      	subs	r0, r0, r3
 80011e0:	4285      	cmp	r5, r0
 80011e2:	d2ed      	bcs.n	80011c0 <UART_WaitOnFlagUntilTimeout+0x10>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	6813      	ldr	r3, [r2, #0]
 80011e8:	490b      	ldr	r1, [pc, #44]	; (8001218 <UART_WaitOnFlagUntilTimeout+0x68>)
 80011ea:	400b      	ands	r3, r1
 80011ec:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	6893      	ldr	r3, [r2, #8]
 80011f2:	31a3      	adds	r1, #163	; 0xa3
 80011f4:	31ff      	adds	r1, #255	; 0xff
 80011f6:	438b      	bics	r3, r1
 80011f8:	6093      	str	r3, [r2, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80011fa:	2320      	movs	r3, #32
 80011fc:	2269      	movs	r2, #105	; 0x69
 80011fe:	54bb      	strb	r3, [r7, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8001200:	3201      	adds	r2, #1
 8001202:	54bb      	strb	r3, [r7, r2]
        __HAL_UNLOCK(huart);
 8001204:	2200      	movs	r2, #0
 8001206:	3348      	adds	r3, #72	; 0x48
 8001208:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 800120a:	2003      	movs	r0, #3
 800120c:	e000      	b.n	8001210 <UART_WaitOnFlagUntilTimeout+0x60>
  return HAL_OK;
 800120e:	2000      	movs	r0, #0
}
 8001210:	bc04      	pop	{r2}
 8001212:	4690      	mov	r8, r2
 8001214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	fffffe5f 	.word	0xfffffe5f

0800121c <HAL_UART_Transmit>:
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	46c6      	mov	lr, r8
 8001220:	b500      	push	{lr}
 8001222:	b084      	sub	sp, #16
 8001224:	0004      	movs	r4, r0
 8001226:	000f      	movs	r7, r1
 8001228:	0016      	movs	r6, r2
 800122a:	001d      	movs	r5, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800122c:	2369      	movs	r3, #105	; 0x69
 800122e:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8001230:	2002      	movs	r0, #2
  if(huart->gState == HAL_UART_STATE_READY)
 8001232:	2b20      	cmp	r3, #32
 8001234:	d003      	beq.n	800123e <HAL_UART_Transmit+0x22>
}
 8001236:	b004      	add	sp, #16
 8001238:	bc04      	pop	{r2}
 800123a:	4690      	mov	r8, r2
 800123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 800123e:	2900      	cmp	r1, #0
 8001240:	d05a      	beq.n	80012f8 <HAL_UART_Transmit+0xdc>
      return  HAL_ERROR;
 8001242:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 8001244:	2a00      	cmp	r2, #0
 8001246:	d0f6      	beq.n	8001236 <HAL_UART_Transmit+0x1a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	015b      	lsls	r3, r3, #5
 800124c:	68a2      	ldr	r2, [r4, #8]
 800124e:	429a      	cmp	r2, r3
 8001250:	d018      	beq.n	8001284 <HAL_UART_Transmit+0x68>
    __HAL_LOCK(huart);
 8001252:	2368      	movs	r3, #104	; 0x68
 8001254:	5ce3      	ldrb	r3, [r4, r3]
 8001256:	2002      	movs	r0, #2
 8001258:	2b01      	cmp	r3, #1
 800125a:	d0ec      	beq.n	8001236 <HAL_UART_Transmit+0x1a>
 800125c:	2201      	movs	r2, #1
 800125e:	2368      	movs	r3, #104	; 0x68
 8001260:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001262:	2300      	movs	r3, #0
 8001264:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001266:	3220      	adds	r2, #32
 8001268:	3369      	adds	r3, #105	; 0x69
 800126a:	54e2      	strb	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800126c:	f7ff f80a 	bl	8000284 <HAL_GetTick>
 8001270:	9003      	str	r0, [sp, #12]
    huart->TxXferSize = Size;
 8001272:	2350      	movs	r3, #80	; 0x50
 8001274:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 8001276:	3302      	adds	r3, #2
 8001278:	52e6      	strh	r6, [r4, r3]
    while(huart->TxXferCount > 0)
 800127a:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	015b      	lsls	r3, r3, #5
 8001280:	4698      	mov	r8, r3
    while(huart->TxXferCount > 0)
 8001282:	e009      	b.n	8001298 <HAL_UART_Transmit+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001284:	6923      	ldr	r3, [r4, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1e3      	bne.n	8001252 <HAL_UART_Transmit+0x36>
      if((((uint32_t)pData)&1U) != 0U)
 800128a:	07cb      	lsls	r3, r1, #31
 800128c:	d5e1      	bpl.n	8001252 <HAL_UART_Transmit+0x36>
 800128e:	e7d2      	b.n	8001236 <HAL_UART_Transmit+0x1a>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001290:	783b      	ldrb	r3, [r7, #0]
 8001292:	6822      	ldr	r2, [r4, #0]
 8001294:	8513      	strh	r3, [r2, #40]	; 0x28
 8001296:	3701      	adds	r7, #1
    while(huart->TxXferCount > 0)
 8001298:	5ba3      	ldrh	r3, [r4, r6]
 800129a:	b29b      	uxth	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d019      	beq.n	80012d4 <HAL_UART_Transmit+0xb8>
      huart->TxXferCount--;
 80012a0:	5ba3      	ldrh	r3, [r4, r6]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	53a3      	strh	r3, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80012a8:	9500      	str	r5, [sp, #0]
 80012aa:	9b03      	ldr	r3, [sp, #12]
 80012ac:	2200      	movs	r2, #0
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	0020      	movs	r0, r4
 80012b2:	f7ff ff7d 	bl	80011b0 <UART_WaitOnFlagUntilTimeout>
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d120      	bne.n	80012fc <HAL_UART_Transmit+0xe0>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012ba:	68a3      	ldr	r3, [r4, #8]
 80012bc:	4543      	cmp	r3, r8
 80012be:	d1e7      	bne.n	8001290 <HAL_UART_Transmit+0x74>
 80012c0:	6923      	ldr	r3, [r4, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1e4      	bne.n	8001290 <HAL_UART_Transmit+0x74>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80012c6:	883b      	ldrh	r3, [r7, #0]
 80012c8:	05db      	lsls	r3, r3, #23
 80012ca:	0ddb      	lsrs	r3, r3, #23
 80012cc:	6822      	ldr	r2, [r4, #0]
 80012ce:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 80012d0:	3702      	adds	r7, #2
 80012d2:	e7e1      	b.n	8001298 <HAL_UART_Transmit+0x7c>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80012d4:	9500      	str	r5, [sp, #0]
 80012d6:	9b03      	ldr	r3, [sp, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	0020      	movs	r0, r4
 80012de:	f7ff ff67 	bl	80011b0 <UART_WaitOnFlagUntilTimeout>
 80012e2:	2800      	cmp	r0, #0
 80012e4:	d001      	beq.n	80012ea <HAL_UART_Transmit+0xce>
      return HAL_TIMEOUT;
 80012e6:	2003      	movs	r0, #3
 80012e8:	e7a5      	b.n	8001236 <HAL_UART_Transmit+0x1a>
    huart->gState = HAL_UART_STATE_READY;
 80012ea:	2220      	movs	r2, #32
 80012ec:	2369      	movs	r3, #105	; 0x69
 80012ee:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 80012f0:	2200      	movs	r2, #0
 80012f2:	3b01      	subs	r3, #1
 80012f4:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 80012f6:	e79e      	b.n	8001236 <HAL_UART_Transmit+0x1a>
      return  HAL_ERROR;
 80012f8:	2001      	movs	r0, #1
 80012fa:	e79c      	b.n	8001236 <HAL_UART_Transmit+0x1a>
        return HAL_TIMEOUT;
 80012fc:	2003      	movs	r0, #3
 80012fe:	e79a      	b.n	8001236 <HAL_UART_Transmit+0x1a>

08001300 <HAL_UART_Receive>:
{
 8001300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001302:	46d6      	mov	lr, sl
 8001304:	4647      	mov	r7, r8
 8001306:	b580      	push	{r7, lr}
 8001308:	b085      	sub	sp, #20
 800130a:	0004      	movs	r4, r0
 800130c:	000f      	movs	r7, r1
 800130e:	0016      	movs	r6, r2
 8001310:	001d      	movs	r5, r3
  if(huart->RxState == HAL_UART_STATE_READY)
 8001312:	236a      	movs	r3, #106	; 0x6a
 8001314:	5cc3      	ldrb	r3, [r0, r3]
    return HAL_BUSY;
 8001316:	2002      	movs	r0, #2
  if(huart->RxState == HAL_UART_STATE_READY)
 8001318:	2b20      	cmp	r3, #32
 800131a:	d004      	beq.n	8001326 <HAL_UART_Receive+0x26>
}
 800131c:	b005      	add	sp, #20
 800131e:	bc0c      	pop	{r2, r3}
 8001320:	4690      	mov	r8, r2
 8001322:	469a      	mov	sl, r3
 8001324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL ) || (Size == 0U))
 8001326:	2900      	cmp	r1, #0
 8001328:	d100      	bne.n	800132c <HAL_UART_Receive+0x2c>
 800132a:	e081      	b.n	8001430 <HAL_UART_Receive+0x130>
      return  HAL_ERROR;
 800132c:	3801      	subs	r0, #1
    if((pData == NULL ) || (Size == 0U))
 800132e:	2a00      	cmp	r2, #0
 8001330:	d0f4      	beq.n	800131c <HAL_UART_Receive+0x1c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001332:	2380      	movs	r3, #128	; 0x80
 8001334:	015b      	lsls	r3, r3, #5
 8001336:	68a2      	ldr	r2, [r4, #8]
 8001338:	429a      	cmp	r2, r3
 800133a:	d021      	beq.n	8001380 <HAL_UART_Receive+0x80>
    __HAL_LOCK(huart);
 800133c:	2368      	movs	r3, #104	; 0x68
 800133e:	5ce3      	ldrb	r3, [r4, r3]
 8001340:	2002      	movs	r0, #2
 8001342:	2b01      	cmp	r3, #1
 8001344:	d0ea      	beq.n	800131c <HAL_UART_Receive+0x1c>
 8001346:	2201      	movs	r2, #1
 8001348:	2368      	movs	r3, #104	; 0x68
 800134a:	54e2      	strb	r2, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800134c:	2300      	movs	r3, #0
 800134e:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001350:	3221      	adds	r2, #33	; 0x21
 8001352:	336a      	adds	r3, #106	; 0x6a
 8001354:	54e2      	strb	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8001356:	f7fe ff95 	bl	8000284 <HAL_GetTick>
 800135a:	9003      	str	r0, [sp, #12]
    huart->RxXferSize = Size;
 800135c:	2358      	movs	r3, #88	; 0x58
 800135e:	52e6      	strh	r6, [r4, r3]
    huart->RxXferCount = Size;
 8001360:	3302      	adds	r3, #2
 8001362:	52e6      	strh	r6, [r4, r3]
    UART_MASK_COMPUTATION(huart);
 8001364:	68a3      	ldr	r3, [r4, #8]
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	0152      	lsls	r2, r2, #5
 800136a:	4293      	cmp	r3, r2
 800136c:	d00e      	beq.n	800138c <HAL_UART_Receive+0x8c>
 800136e:	2b00      	cmp	r3, #0
 8001370:	d11b      	bne.n	80013aa <HAL_UART_Receive+0xaa>
 8001372:	6923      	ldr	r3, [r4, #16]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d114      	bne.n	80013a2 <HAL_UART_Receive+0xa2>
 8001378:	22ff      	movs	r2, #255	; 0xff
 800137a:	335c      	adds	r3, #92	; 0x5c
 800137c:	52e2      	strh	r2, [r4, r3]
 800137e:	e018      	b.n	80013b2 <HAL_UART_Receive+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001380:	6923      	ldr	r3, [r4, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1da      	bne.n	800133c <HAL_UART_Receive+0x3c>
      if((((uint32_t)pData)&1U) != 0U)
 8001386:	07cb      	lsls	r3, r1, #31
 8001388:	d5d8      	bpl.n	800133c <HAL_UART_Receive+0x3c>
 800138a:	e7c7      	b.n	800131c <HAL_UART_Receive+0x1c>
    UART_MASK_COMPUTATION(huart);
 800138c:	6923      	ldr	r3, [r4, #16]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d103      	bne.n	800139a <HAL_UART_Receive+0x9a>
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <HAL_UART_Receive+0x138>)
 8001394:	335c      	adds	r3, #92	; 0x5c
 8001396:	52e2      	strh	r2, [r4, r3]
 8001398:	e00b      	b.n	80013b2 <HAL_UART_Receive+0xb2>
 800139a:	22ff      	movs	r2, #255	; 0xff
 800139c:	235c      	movs	r3, #92	; 0x5c
 800139e:	52e2      	strh	r2, [r4, r3]
 80013a0:	e007      	b.n	80013b2 <HAL_UART_Receive+0xb2>
 80013a2:	227f      	movs	r2, #127	; 0x7f
 80013a4:	235c      	movs	r3, #92	; 0x5c
 80013a6:	52e2      	strh	r2, [r4, r3]
 80013a8:	e003      	b.n	80013b2 <HAL_UART_Receive+0xb2>
 80013aa:	2280      	movs	r2, #128	; 0x80
 80013ac:	0552      	lsls	r2, r2, #21
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d007      	beq.n	80013c2 <HAL_UART_Receive+0xc2>
    uhMask = huart->Mask;
 80013b2:	235c      	movs	r3, #92	; 0x5c
 80013b4:	5ae3      	ldrh	r3, [r4, r3]
 80013b6:	469a      	mov	sl, r3
    while(huart->RxXferCount > 0U)
 80013b8:	265a      	movs	r6, #90	; 0x5a
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013ba:	2380      	movs	r3, #128	; 0x80
 80013bc:	015b      	lsls	r3, r3, #5
 80013be:	4698      	mov	r8, r3
    while(huart->RxXferCount > 0U)
 80013c0:	e010      	b.n	80013e4 <HAL_UART_Receive+0xe4>
    UART_MASK_COMPUTATION(huart);
 80013c2:	6923      	ldr	r3, [r4, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d103      	bne.n	80013d0 <HAL_UART_Receive+0xd0>
 80013c8:	227f      	movs	r2, #127	; 0x7f
 80013ca:	335c      	adds	r3, #92	; 0x5c
 80013cc:	52e2      	strh	r2, [r4, r3]
 80013ce:	e7f0      	b.n	80013b2 <HAL_UART_Receive+0xb2>
 80013d0:	223f      	movs	r2, #63	; 0x3f
 80013d2:	235c      	movs	r3, #92	; 0x5c
 80013d4:	52e2      	strh	r2, [r4, r3]
 80013d6:	e7ec      	b.n	80013b2 <HAL_UART_Receive+0xb2>
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013dc:	4652      	mov	r2, sl
 80013de:	4013      	ands	r3, r2
 80013e0:	703b      	strb	r3, [r7, #0]
 80013e2:	3701      	adds	r7, #1
    while(huart->RxXferCount > 0U)
 80013e4:	5ba3      	ldrh	r3, [r4, r6]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d019      	beq.n	8001420 <HAL_UART_Receive+0x120>
      huart->RxXferCount--;
 80013ec:	5ba3      	ldrh	r3, [r4, r6]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	53a3      	strh	r3, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80013f4:	9500      	str	r5, [sp, #0]
 80013f6:	9b03      	ldr	r3, [sp, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	2120      	movs	r1, #32
 80013fc:	0020      	movs	r0, r4
 80013fe:	f7ff fed7 	bl	80011b0 <UART_WaitOnFlagUntilTimeout>
 8001402:	2800      	cmp	r0, #0
 8001404:	d116      	bne.n	8001434 <HAL_UART_Receive+0x134>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001406:	68a3      	ldr	r3, [r4, #8]
 8001408:	4543      	cmp	r3, r8
 800140a:	d1e5      	bne.n	80013d8 <HAL_UART_Receive+0xd8>
 800140c:	6923      	ldr	r3, [r4, #16]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1e2      	bne.n	80013d8 <HAL_UART_Receive+0xd8>
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001416:	4652      	mov	r2, sl
 8001418:	4013      	ands	r3, r2
 800141a:	803b      	strh	r3, [r7, #0]
        pData +=2U;
 800141c:	3702      	adds	r7, #2
 800141e:	e7e1      	b.n	80013e4 <HAL_UART_Receive+0xe4>
    huart->RxState = HAL_UART_STATE_READY;
 8001420:	2220      	movs	r2, #32
 8001422:	336a      	adds	r3, #106	; 0x6a
 8001424:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8001426:	2200      	movs	r2, #0
 8001428:	3b02      	subs	r3, #2
 800142a:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 800142c:	2000      	movs	r0, #0
 800142e:	e775      	b.n	800131c <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 8001430:	2001      	movs	r0, #1
 8001432:	e773      	b.n	800131c <HAL_UART_Receive+0x1c>
        return HAL_TIMEOUT;
 8001434:	2003      	movs	r0, #3
 8001436:	e771      	b.n	800131c <HAL_UART_Receive+0x1c>
 8001438:	000001ff 	.word	0x000001ff

0800143c <UART_CheckIdleState>:
{
 800143c:	b530      	push	{r4, r5, lr}
 800143e:	b083      	sub	sp, #12
 8001440:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001442:	2300      	movs	r3, #0
 8001444:	66c3      	str	r3, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001446:	f7fe ff1d 	bl	8000284 <HAL_GetTick>
 800144a:	0005      	movs	r5, r0
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	4a1a      	ldr	r2, [pc, #104]	; (80014b8 <UART_CheckIdleState+0x7c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <UART_CheckIdleState+0x34>
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <UART_CheckIdleState+0x80>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d00a      	beq.n	8001470 <UART_CheckIdleState+0x34>
  huart->gState  = HAL_UART_STATE_READY;
 800145a:	2320      	movs	r3, #32
 800145c:	2269      	movs	r2, #105	; 0x69
 800145e:	54a3      	strb	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8001460:	3201      	adds	r2, #1
 8001462:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(huart);
 8001464:	2200      	movs	r2, #0
 8001466:	3348      	adds	r3, #72	; 0x48
 8001468:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 800146a:	2000      	movs	r0, #0
}
 800146c:	b003      	add	sp, #12
 800146e:	bd30      	pop	{r4, r5, pc}
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	071b      	lsls	r3, r3, #28
 8001474:	d411      	bmi.n	800149a <UART_CheckIdleState+0x5e>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	075b      	lsls	r3, r3, #29
 800147c:	d5ed      	bpl.n	800145a <UART_CheckIdleState+0x1e>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <UART_CheckIdleState+0x84>)
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	002b      	movs	r3, r5
 8001484:	2200      	movs	r2, #0
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	03c9      	lsls	r1, r1, #15
 800148a:	0020      	movs	r0, r4
 800148c:	f7ff fe90 	bl	80011b0 <UART_WaitOnFlagUntilTimeout>
 8001490:	0003      	movs	r3, r0
        return HAL_TIMEOUT;
 8001492:	2003      	movs	r0, #3
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1e9      	bne.n	800146c <UART_CheckIdleState+0x30>
 8001498:	e7df      	b.n	800145a <UART_CheckIdleState+0x1e>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <UART_CheckIdleState+0x84>)
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	002b      	movs	r3, r5
 80014a0:	2200      	movs	r2, #0
 80014a2:	2180      	movs	r1, #128	; 0x80
 80014a4:	0389      	lsls	r1, r1, #14
 80014a6:	0020      	movs	r0, r4
 80014a8:	f7ff fe82 	bl	80011b0 <UART_WaitOnFlagUntilTimeout>
 80014ac:	0003      	movs	r3, r0
        return HAL_TIMEOUT;
 80014ae:	2003      	movs	r0, #3
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d1db      	bne.n	800146c <UART_CheckIdleState+0x30>
 80014b4:	e7df      	b.n	8001476 <UART_CheckIdleState+0x3a>
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	40013800 	.word	0x40013800
 80014bc:	40004400 	.word	0x40004400
 80014c0:	01ffffff 	.word	0x01ffffff

080014c4 <HAL_UART_Init>:
{
 80014c4:	b510      	push	{r4, lr}
 80014c6:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80014c8:	d030      	beq.n	800152c <HAL_UART_Init+0x68>
  if(huart->gState == HAL_UART_STATE_RESET)
 80014ca:	2369      	movs	r3, #105	; 0x69
 80014cc:	5cc3      	ldrb	r3, [r0, r3]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d022      	beq.n	8001518 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 80014d2:	2224      	movs	r2, #36	; 0x24
 80014d4:	2369      	movs	r3, #105	; 0x69
 80014d6:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80014d8:	6822      	ldr	r2, [r4, #0]
 80014da:	6813      	ldr	r3, [r2, #0]
 80014dc:	2101      	movs	r1, #1
 80014de:	438b      	bics	r3, r1
 80014e0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80014e2:	0020      	movs	r0, r4
 80014e4:	f7ff fcf2 	bl	8000ecc <UART_SetConfig>
 80014e8:	2801      	cmp	r0, #1
 80014ea:	d014      	beq.n	8001516 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80014ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	6853      	ldr	r3, [r2, #4]
 80014f6:	490e      	ldr	r1, [pc, #56]	; (8001530 <HAL_UART_Init+0x6c>)
 80014f8:	400b      	ands	r3, r1
 80014fa:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014fc:	6822      	ldr	r2, [r4, #0]
 80014fe:	6893      	ldr	r3, [r2, #8]
 8001500:	212a      	movs	r1, #42	; 0x2a
 8001502:	438b      	bics	r3, r1
 8001504:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001506:	6822      	ldr	r2, [r4, #0]
 8001508:	6813      	ldr	r3, [r2, #0]
 800150a:	3929      	subs	r1, #41	; 0x29
 800150c:	430b      	orrs	r3, r1
 800150e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001510:	0020      	movs	r0, r4
 8001512:	f7ff ff93 	bl	800143c <UART_CheckIdleState>
}
 8001516:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001518:	2200      	movs	r2, #0
 800151a:	3368      	adds	r3, #104	; 0x68
 800151c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 800151e:	f000 faf5 	bl	8001b0c <HAL_UART_MspInit>
 8001522:	e7d6      	b.n	80014d2 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8001524:	0020      	movs	r0, r4
 8001526:	f7ff fdd3 	bl	80010d0 <UART_AdvFeatureConfig>
 800152a:	e7e2      	b.n	80014f2 <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 800152c:	2001      	movs	r0, #1
 800152e:	e7f2      	b.n	8001516 <HAL_UART_Init+0x52>
 8001530:	ffffb7ff 	.word	0xffffb7ff

08001534 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001534:	2369      	movs	r3, #105	; 0x69
 8001536:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8001538:	3b67      	subs	r3, #103	; 0x67
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800153a:	2a21      	cmp	r2, #33	; 0x21
 800153c:	d001      	beq.n	8001542 <UART_Transmit_IT+0xe>
  }
}
 800153e:	0018      	movs	r0, r3
 8001540:	4770      	bx	lr
    if(huart->TxXferCount == 0U)
 8001542:	3350      	adds	r3, #80	; 0x50
 8001544:	5ac3      	ldrh	r3, [r0, r3]
 8001546:	b29b      	uxth	r3, r3
 8001548:	2b00      	cmp	r3, #0
 800154a:	d011      	beq.n	8001570 <UART_Transmit_IT+0x3c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	015b      	lsls	r3, r3, #5
 8001550:	6882      	ldr	r2, [r0, #8]
 8001552:	429a      	cmp	r2, r3
 8001554:	d018      	beq.n	8001588 <UART_Transmit_IT+0x54>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001556:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	64c2      	str	r2, [r0, #76]	; 0x4c
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	6802      	ldr	r2, [r0, #0]
 8001560:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8001562:	2252      	movs	r2, #82	; 0x52
 8001564:	5a83      	ldrh	r3, [r0, r2]
 8001566:	3b01      	subs	r3, #1
 8001568:	b29b      	uxth	r3, r3
 800156a:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e7e6      	b.n	800153e <UART_Transmit_IT+0xa>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001570:	6802      	ldr	r2, [r0, #0]
 8001572:	6813      	ldr	r3, [r2, #0]
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	438b      	bics	r3, r1
 8001578:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800157a:	6802      	ldr	r2, [r0, #0]
 800157c:	6813      	ldr	r3, [r2, #0]
 800157e:	3940      	subs	r1, #64	; 0x40
 8001580:	430b      	orrs	r3, r1
 8001582:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	e7da      	b.n	800153e <UART_Transmit_IT+0xa>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001588:	6903      	ldr	r3, [r0, #16]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e3      	bne.n	8001556 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800158e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001590:	881b      	ldrh	r3, [r3, #0]
 8001592:	05db      	lsls	r3, r3, #23
 8001594:	0ddb      	lsrs	r3, r3, #23
 8001596:	6802      	ldr	r2, [r0, #0]
 8001598:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800159a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800159c:	3302      	adds	r3, #2
 800159e:	64c3      	str	r3, [r0, #76]	; 0x4c
 80015a0:	e7df      	b.n	8001562 <UART_Transmit_IT+0x2e>

080015a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80015a2:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80015a4:	6802      	ldr	r2, [r0, #0]
 80015a6:	6813      	ldr	r3, [r2, #0]
 80015a8:	2140      	movs	r1, #64	; 0x40
 80015aa:	438b      	bics	r3, r1
 80015ac:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80015ae:	2220      	movs	r2, #32
 80015b0:	2369      	movs	r3, #105	; 0x69
 80015b2:	54c2      	strb	r2, [r0, r3]

  HAL_UART_TxCpltCallback(huart);
 80015b4:	f000 fa91 	bl	8001ada <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80015b8:	2000      	movs	r0, #0
 80015ba:	bd10      	pop	{r4, pc}

080015bc <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80015bc:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015be:	236a      	movs	r3, #106	; 0x6a
 80015c0:	5cc3      	ldrb	r3, [r0, r3]
 80015c2:	2b22      	cmp	r3, #34	; 0x22
 80015c4:	d007      	beq.n	80015d6 <UART_Receive_IT+0x1a>
    return HAL_OK;
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80015c6:	6802      	ldr	r2, [r0, #0]
 80015c8:	6993      	ldr	r3, [r2, #24]
 80015ca:	2108      	movs	r1, #8
 80015cc:	430b      	orrs	r3, r1
 80015ce:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 80015d0:	2302      	movs	r3, #2
  }
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	bd10      	pop	{r4, pc}
  uint16_t  uhMask = huart->Mask;
 80015d6:	333a      	adds	r3, #58	; 0x3a
 80015d8:	5ac1      	ldrh	r1, [r0, r3]
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80015da:	6803      	ldr	r3, [r0, #0]
 80015dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80015de:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	0152      	lsls	r2, r2, #5
 80015e4:	6884      	ldr	r4, [r0, #8]
 80015e6:	4294      	cmp	r4, r2
 80015e8:	d01e      	beq.n	8001628 <UART_Receive_IT+0x6c>
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80015ea:	6d42      	ldr	r2, [r0, #84]	; 0x54
 80015ec:	1c54      	adds	r4, r2, #1
 80015ee:	6544      	str	r4, [r0, #84]	; 0x54
 80015f0:	400b      	ands	r3, r1
 80015f2:	7013      	strb	r3, [r2, #0]
    if(--huart->RxXferCount == 0U)
 80015f4:	235a      	movs	r3, #90	; 0x5a
 80015f6:	5ac2      	ldrh	r2, [r0, r3]
 80015f8:	3a01      	subs	r2, #1
 80015fa:	b292      	uxth	r2, r2
 80015fc:	52c2      	strh	r2, [r0, r3]
    return HAL_OK;
 80015fe:	2300      	movs	r3, #0
    if(--huart->RxXferCount == 0U)
 8001600:	2a00      	cmp	r2, #0
 8001602:	d1e6      	bne.n	80015d2 <UART_Receive_IT+0x16>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001604:	6802      	ldr	r2, [r0, #0]
 8001606:	6813      	ldr	r3, [r2, #0]
 8001608:	490c      	ldr	r1, [pc, #48]	; (800163c <UART_Receive_IT+0x80>)
 800160a:	400b      	ands	r3, r1
 800160c:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800160e:	6802      	ldr	r2, [r0, #0]
 8001610:	6893      	ldr	r3, [r2, #8]
 8001612:	3123      	adds	r1, #35	; 0x23
 8001614:	31ff      	adds	r1, #255	; 0xff
 8001616:	438b      	bics	r3, r1
 8001618:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 800161a:	2220      	movs	r2, #32
 800161c:	236a      	movs	r3, #106	; 0x6a
 800161e:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 8001620:	f000 fa5a 	bl	8001ad8 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	e7d4      	b.n	80015d2 <UART_Receive_IT+0x16>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001628:	6902      	ldr	r2, [r0, #16]
 800162a:	2a00      	cmp	r2, #0
 800162c:	d1dd      	bne.n	80015ea <UART_Receive_IT+0x2e>
      *tmp = (uint16_t)(uhdata & uhMask);
 800162e:	400b      	ands	r3, r1
 8001630:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001632:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2U;
 8001634:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001636:	3302      	adds	r3, #2
 8001638:	6543      	str	r3, [r0, #84]	; 0x54
 800163a:	e7db      	b.n	80015f4 <UART_Receive_IT+0x38>
 800163c:	fffffedf 	.word	0xfffffedf

08001640 <HAL_UART_IRQHandler>:
{
 8001640:	b570      	push	{r4, r5, r6, lr}
 8001642:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001644:	6802      	ldr	r2, [r0, #0]
 8001646:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001648:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 800164a:	0718      	lsls	r0, r3, #28
 800164c:	d140      	bne.n	80016d0 <HAL_UART_IRQHandler+0x90>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800164e:	0698      	lsls	r0, r3, #26
 8001650:	d501      	bpl.n	8001656 <HAL_UART_IRQHandler+0x16>
 8001652:	0688      	lsls	r0, r1, #26
 8001654:	d40d      	bmi.n	8001672 <HAL_UART_IRQHandler+0x32>
  cr3its = READ_REG(huart->Instance->CR3);
 8001656:	6895      	ldr	r5, [r2, #8]
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001658:	02d8      	lsls	r0, r3, #11
 800165a:	d501      	bpl.n	8001660 <HAL_UART_IRQHandler+0x20>
 800165c:	0268      	lsls	r0, r5, #9
 800165e:	d423      	bmi.n	80016a8 <HAL_UART_IRQHandler+0x68>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001660:	061a      	lsls	r2, r3, #24
 8001662:	d501      	bpl.n	8001668 <HAL_UART_IRQHandler+0x28>
 8001664:	060a      	lsls	r2, r1, #24
 8001666:	d42b      	bmi.n	80016c0 <HAL_UART_IRQHandler+0x80>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001668:	065b      	lsls	r3, r3, #25
 800166a:	d501      	bpl.n	8001670 <HAL_UART_IRQHandler+0x30>
 800166c:	064b      	lsls	r3, r1, #25
 800166e:	d42b      	bmi.n	80016c8 <HAL_UART_IRQHandler+0x88>
}
 8001670:	bd70      	pop	{r4, r5, r6, pc}
      UART_Receive_IT(huart);
 8001672:	0020      	movs	r0, r4
 8001674:	f7ff ffa2 	bl	80015bc <UART_Receive_IT>
      return;
 8001678:	e7fa      	b.n	8001670 <HAL_UART_IRQHandler+0x30>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800167a:	075a      	lsls	r2, r3, #29
 800167c:	d54d      	bpl.n	800171a <HAL_UART_IRQHandler+0xda>
 800167e:	2800      	cmp	r0, #0
 8001680:	d04b      	beq.n	800171a <HAL_UART_IRQHandler+0xda>
 8001682:	e043      	b.n	800170c <HAL_UART_IRQHandler+0xcc>
        UART_Receive_IT(huart);
 8001684:	0020      	movs	r0, r4
 8001686:	f7ff ff99 	bl	80015bc <UART_Receive_IT>
 800168a:	e059      	b.n	8001740 <HAL_UART_IRQHandler+0x100>
            HAL_UART_ErrorCallback(huart);
 800168c:	0020      	movs	r0, r4
 800168e:	f7ff fc11 	bl	8000eb4 <HAL_UART_ErrorCallback>
 8001692:	e7ed      	b.n	8001670 <HAL_UART_IRQHandler+0x30>
          HAL_UART_ErrorCallback(huart);
 8001694:	0020      	movs	r0, r4
 8001696:	f7ff fc0d 	bl	8000eb4 <HAL_UART_ErrorCallback>
 800169a:	e7e9      	b.n	8001670 <HAL_UART_IRQHandler+0x30>
        HAL_UART_ErrorCallback(huart);
 800169c:	0020      	movs	r0, r4
 800169e:	f7ff fc09 	bl	8000eb4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	66e3      	str	r3, [r4, #108]	; 0x6c
 80016a6:	e7e3      	b.n	8001670 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	035b      	lsls	r3, r3, #13
 80016ac:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80016ae:	2320      	movs	r3, #32
 80016b0:	2269      	movs	r2, #105	; 0x69
 80016b2:	54a3      	strb	r3, [r4, r2]
    huart->RxState = HAL_UART_STATE_READY;
 80016b4:	3201      	adds	r2, #1
 80016b6:	54a3      	strb	r3, [r4, r2]
    HAL_UARTEx_WakeupCallback(huart);
 80016b8:	0020      	movs	r0, r4
 80016ba:	f000 f865 	bl	8001788 <HAL_UARTEx_WakeupCallback>
    return;
 80016be:	e7d7      	b.n	8001670 <HAL_UART_IRQHandler+0x30>
    UART_Transmit_IT(huart);
 80016c0:	0020      	movs	r0, r4
 80016c2:	f7ff ff37 	bl	8001534 <UART_Transmit_IT>
    return;
 80016c6:	e7d3      	b.n	8001670 <HAL_UART_IRQHandler+0x30>
    UART_EndTransmit_IT(huart);
 80016c8:	0020      	movs	r0, r4
 80016ca:	f7ff ff6a 	bl	80015a2 <UART_EndTransmit_IT>
    return;
 80016ce:	e7cf      	b.n	8001670 <HAL_UART_IRQHandler+0x30>
  cr3its = READ_REG(huart->Instance->CR3);
 80016d0:	6895      	ldr	r5, [r2, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80016d2:	2001      	movs	r0, #1
 80016d4:	4028      	ands	r0, r5
 80016d6:	d103      	bne.n	80016e0 <HAL_UART_IRQHandler+0xa0>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80016d8:	2690      	movs	r6, #144	; 0x90
 80016da:	0076      	lsls	r6, r6, #1
 80016dc:	4231      	tst	r1, r6
 80016de:	d0bb      	beq.n	8001658 <HAL_UART_IRQHandler+0x18>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80016e0:	07dd      	lsls	r5, r3, #31
 80016e2:	d506      	bpl.n	80016f2 <HAL_UART_IRQHandler+0xb2>
 80016e4:	05cd      	lsls	r5, r1, #23
 80016e6:	d504      	bpl.n	80016f2 <HAL_UART_IRQHandler+0xb2>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80016e8:	2501      	movs	r5, #1
 80016ea:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016ec:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80016ee:	432a      	orrs	r2, r5
 80016f0:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80016f2:	079a      	lsls	r2, r3, #30
 80016f4:	d5c1      	bpl.n	800167a <HAL_UART_IRQHandler+0x3a>
 80016f6:	2800      	cmp	r0, #0
 80016f8:	d00f      	beq.n	800171a <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80016fa:	6822      	ldr	r2, [r4, #0]
 80016fc:	2502      	movs	r5, #2
 80016fe:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001700:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001702:	3502      	adds	r5, #2
 8001704:	432a      	orrs	r2, r5
 8001706:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001708:	421d      	tst	r5, r3
 800170a:	d006      	beq.n	800171a <HAL_UART_IRQHandler+0xda>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 800170c:	6822      	ldr	r2, [r4, #0]
 800170e:	2504      	movs	r5, #4
 8001710:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001712:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001714:	3d02      	subs	r5, #2
 8001716:	432a      	orrs	r2, r5
 8001718:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800171a:	071a      	lsls	r2, r3, #28
 800171c:	d509      	bpl.n	8001732 <HAL_UART_IRQHandler+0xf2>
 800171e:	068a      	lsls	r2, r1, #26
 8001720:	d401      	bmi.n	8001726 <HAL_UART_IRQHandler+0xe6>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001722:	2800      	cmp	r0, #0
 8001724:	d005      	beq.n	8001732 <HAL_UART_IRQHandler+0xf2>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	2008      	movs	r0, #8
 800172a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800172c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800172e:	4302      	orrs	r2, r0
 8001730:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001732:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001734:	2a00      	cmp	r2, #0
 8001736:	d09b      	beq.n	8001670 <HAL_UART_IRQHandler+0x30>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001738:	069b      	lsls	r3, r3, #26
 800173a:	d501      	bpl.n	8001740 <HAL_UART_IRQHandler+0x100>
 800173c:	068b      	lsls	r3, r1, #26
 800173e:	d4a1      	bmi.n	8001684 <HAL_UART_IRQHandler+0x44>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001740:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001742:	071b      	lsls	r3, r3, #28
 8001744:	d403      	bmi.n	800174e <HAL_UART_IRQHandler+0x10e>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800174a:	065b      	lsls	r3, r3, #25
 800174c:	d5a6      	bpl.n	800169c <HAL_UART_IRQHandler+0x5c>
        UART_EndRxTransfer(huart);
 800174e:	0020      	movs	r0, r4
 8001750:	f7ff fb9e 	bl	8000e90 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001754:	6823      	ldr	r3, [r4, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	0652      	lsls	r2, r2, #25
 800175a:	d59b      	bpl.n	8001694 <HAL_UART_IRQHandler+0x54>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800175c:	689a      	ldr	r2, [r3, #8]
 800175e:	2140      	movs	r1, #64	; 0x40
 8001760:	438a      	bics	r2, r1
 8001762:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001766:	2b00      	cmp	r3, #0
 8001768:	d090      	beq.n	800168c <HAL_UART_IRQHandler+0x4c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800176a:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_UART_IRQHandler+0x144>)
 800176c:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800176e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001770:	f7fe fdfa 	bl	8000368 <HAL_DMA_Abort_IT>
 8001774:	2800      	cmp	r0, #0
 8001776:	d100      	bne.n	800177a <HAL_UART_IRQHandler+0x13a>
 8001778:	e77a      	b.n	8001670 <HAL_UART_IRQHandler+0x30>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800177a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800177c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800177e:	4798      	blx	r3
 8001780:	e776      	b.n	8001670 <HAL_UART_IRQHandler+0x30>
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	08000eb7 	.word	0x08000eb7

08001788 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8001788:	4770      	bx	lr

0800178a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178a:	b530      	push	{r4, r5, lr}
 800178c:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	2234      	movs	r2, #52	; 0x34
 8001790:	2100      	movs	r1, #0
 8001792:	a80b      	add	r0, sp, #44	; 0x2c
 8001794:	f000 fc48 	bl	8002028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001798:	2210      	movs	r2, #16
 800179a:	2100      	movs	r1, #0
 800179c:	a807      	add	r0, sp, #28
 800179e:	f000 fc43 	bl	8002028 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a2:	221c      	movs	r2, #28
 80017a4:	2100      	movs	r1, #0
 80017a6:	4668      	mov	r0, sp
 80017a8:	f000 fc3e 	bl	8002028 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ac:	2302      	movs	r3, #2
 80017ae:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017b0:	2501      	movs	r5, #1
 80017b2:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b4:	330e      	adds	r3, #14
 80017b6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b8:	a80b      	add	r0, sp, #44	; 0x2c
 80017ba:	f7fe fee7 	bl	800058c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017be:	2307      	movs	r3, #7
 80017c0:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017c2:	2400      	movs	r4, #0
 80017c4:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c8:	940a      	str	r4, [sp, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ca:	2100      	movs	r1, #0
 80017cc:	a807      	add	r0, sp, #28
 80017ce:	f7ff f9c3 	bl	8000b58 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80017d2:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80017d4:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d6:	4668      	mov	r0, sp
 80017d8:	f7ff faa6 	bl	8000d28 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80017dc:	b019      	add	sp, #100	; 0x64
 80017de:	bd30      	pop	{r4, r5, pc}

080017e0 <main>:
{
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	46de      	mov	lr, fp
 80017e4:	4657      	mov	r7, sl
 80017e6:	464e      	mov	r6, r9
 80017e8:	4645      	mov	r5, r8
 80017ea:	b5e0      	push	{r5, r6, r7, lr}
 80017ec:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 80017ee:	f7fe fd31 	bl	8000254 <HAL_Init>
  SystemClock_Config();
 80017f2:	f7ff ffca 	bl	800178a <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	2214      	movs	r2, #20
 80017f8:	2100      	movs	r1, #0
 80017fa:	a803      	add	r0, sp, #12
 80017fc:	f000 fc14 	bl	8002028 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4ba0      	ldr	r3, [pc, #640]	; (8001a84 <main+0x2a4>)
 8001802:	6959      	ldr	r1, [r3, #20]
 8001804:	2080      	movs	r0, #128	; 0x80
 8001806:	0280      	lsls	r0, r0, #10
 8001808:	4301      	orrs	r1, r0
 800180a:	6159      	str	r1, [r3, #20]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	4002      	ands	r2, r0
 8001810:	9201      	str	r2, [sp, #4]
 8001812:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001814:	695a      	ldr	r2, [r3, #20]
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	02c9      	lsls	r1, r1, #11
 800181a:	430a      	orrs	r2, r1
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	400b      	ands	r3, r1
 8001822:	9302      	str	r3, [sp, #8]
 8001824:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2104      	movs	r1, #4
 800182a:	4897      	ldr	r0, [pc, #604]	; (8001a88 <main+0x2a8>)
 800182c:	f7fe fea4 	bl	8000578 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	2110      	movs	r1, #16
 8001834:	4894      	ldr	r0, [pc, #592]	; (8001a88 <main+0x2a8>)
 8001836:	f7fe fe9f 	bl	8000578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800183a:	2780      	movs	r7, #128	; 0x80
 800183c:	007f      	lsls	r7, r7, #1
 800183e:	2200      	movs	r2, #0
 8001840:	0039      	movs	r1, r7
 8001842:	2090      	movs	r0, #144	; 0x90
 8001844:	05c0      	lsls	r0, r0, #23
 8001846:	f7fe fe97 	bl	8000578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800184a:	2304      	movs	r3, #4
 800184c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2501      	movs	r5, #1
 8001850:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2400      	movs	r4, #0
 8001854:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	a903      	add	r1, sp, #12
 800185a:	488b      	ldr	r0, [pc, #556]	; (8001a88 <main+0x2a8>)
 800185c:	f7fe fdaa 	bl	80003b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001860:	2610      	movs	r6, #16
 8001862:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186a:	a903      	add	r1, sp, #12
 800186c:	4886      	ldr	r0, [pc, #536]	; (8001a88 <main+0x2a8>)
 800186e:	f7fe fda1 	bl	80003b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001872:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001874:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187a:	a903      	add	r1, sp, #12
 800187c:	2090      	movs	r0, #144	; 0x90
 800187e:	05c0      	lsls	r0, r0, #23
 8001880:	f7fe fd98 	bl	80003b4 <HAL_GPIO_Init>


  /*Configure GPIO pin : PB4 */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001884:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	a903      	add	r1, sp, #12
 800188e:	487e      	ldr	r0, [pc, #504]	; (8001a88 <main+0x2a8>)
 8001890:	f7fe fd90 	bl	80003b4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB5 */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001894:	2320      	movs	r3, #32
 8001896:	4699      	mov	r9, r3
 8001898:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	a903      	add	r1, sp, #12
 80018a0:	4879      	ldr	r0, [pc, #484]	; (8001a88 <main+0x2a8>)
 80018a2:	f7fe fd87 	bl	80003b4 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018a6:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	9405      	str	r4, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	a903      	add	r1, sp, #12
 80018ae:	2090      	movs	r0, #144	; 0x90
 80018b0:	05c0      	lsls	r0, r0, #23
 80018b2:	f7fe fd7f 	bl	80003b4 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 80018b6:	4e75      	ldr	r6, [pc, #468]	; (8001a8c <main+0x2ac>)
 80018b8:	4b75      	ldr	r3, [pc, #468]	; (8001a90 <main+0x2b0>)
 80018ba:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 115200;
 80018bc:	23e1      	movs	r3, #225	; 0xe1
 80018be:	025b      	lsls	r3, r3, #9
 80018c0:	469b      	mov	fp, r3
 80018c2:	6073      	str	r3, [r6, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018c4:	60b4      	str	r4, [r6, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018c6:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018c8:	6134      	str	r4, [r6, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ca:	230c      	movs	r3, #12
 80018cc:	469a      	mov	sl, r3
 80018ce:	6173      	str	r3, [r6, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d0:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d2:	61f4      	str	r4, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018d4:	6234      	str	r4, [r6, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018d6:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018d8:	0030      	movs	r0, r6
 80018da:	f7ff fdf3 	bl	80014c4 <HAL_UART_Init>
  huart4.Instance = USART4;
 80018de:	486d      	ldr	r0, [pc, #436]	; (8001a94 <main+0x2b4>)
 80018e0:	4b6d      	ldr	r3, [pc, #436]	; (8001a98 <main+0x2b8>)
 80018e2:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = 115200;
 80018e4:	465b      	mov	r3, fp
 80018e6:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80018e8:	6084      	str	r4, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80018ea:	60c4      	str	r4, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80018ec:	6104      	str	r4, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80018ee:	4653      	mov	r3, sl
 80018f0:	6143      	str	r3, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	6184      	str	r4, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	61c4      	str	r4, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f6:	6204      	str	r4, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f8:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80018fa:	f7ff fde3 	bl	80014c4 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE);
 80018fe:	6832      	ldr	r2, [r6, #0]
 8001900:	6813      	ldr	r3, [r2, #0]
 8001902:	4649      	mov	r1, r9
 8001904:	430b      	orrs	r3, r1
 8001906:	6013      	str	r3, [r2, #0]
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	0039      	movs	r1, r7
 800190c:	2090      	movs	r0, #144	; 0x90
 800190e:	05c0      	lsls	r0, r0, #23
 8001910:	f7fe fe32 	bl	8000578 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2104      	movs	r1, #4
 8001918:	485b      	ldr	r0, [pc, #364]	; (8001a88 <main+0x2a8>)
 800191a:	f7fe fe2d 	bl	8000578 <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 800191e:	485f      	ldr	r0, [pc, #380]	; (8001a9c <main+0x2bc>)
 8001920:	f7fe fcb6 	bl	8000290 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	0039      	movs	r1, r7
 8001928:	2090      	movs	r0, #144	; 0x90
 800192a:	05c0      	lsls	r0, r0, #23
 800192c:	f7fe fe24 	bl	8000578 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2104      	movs	r1, #4
 8001934:	4854      	ldr	r0, [pc, #336]	; (8001a88 <main+0x2a8>)
 8001936:	f7fe fe1f 	bl	8000578 <HAL_GPIO_WritePin>
    HAL_Delay(3000);
 800193a:	4859      	ldr	r0, [pc, #356]	; (8001aa0 <main+0x2c0>)
 800193c:	f7fe fca8 	bl	8000290 <HAL_Delay>
	 HAL_UART_Transmit(&huart1,(uint8_t *)atCommand,strlen(atCommand),100);
 8001940:	4c58      	ldr	r4, [pc, #352]	; (8001aa4 <main+0x2c4>)
 8001942:	0020      	movs	r0, r4
 8001944:	f7fe fbe0 	bl	8000108 <strlen>
 8001948:	b282      	uxth	r2, r0
 800194a:	2364      	movs	r3, #100	; 0x64
 800194c:	0021      	movs	r1, r4
 800194e:	0030      	movs	r0, r6
 8001950:	f7ff fc64 	bl	800121c <HAL_UART_Transmit>
	 HAL_Delay(2000);
 8001954:	20fa      	movs	r0, #250	; 0xfa
 8001956:	00c0      	lsls	r0, r0, #3
 8001958:	f7fe fc9a 	bl	8000290 <HAL_Delay>
		  if(outputState){
 800195c:	4e52      	ldr	r6, [pc, #328]	; (8001aa8 <main+0x2c8>)
			  outputState = 0;
 800195e:	0037      	movs	r7, r6
		  outputState = 1;
 8001960:	46b0      	mov	r8, r6
	  if(wakeUpFlag || (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) == 1 && firstMsg)){ // || HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) == 1
 8001962:	4c52      	ldr	r4, [pc, #328]	; (8001aac <main+0x2cc>)
 8001964:	e01a      	b.n	800199c <main+0x1bc>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8001966:	2201      	movs	r2, #1
 8001968:	2110      	movs	r1, #16
 800196a:	4847      	ldr	r0, [pc, #284]	; (8001a88 <main+0x2a8>)
 800196c:	f7fe fe04 	bl	8000578 <HAL_GPIO_WritePin>
		  outputState = 1;
 8001970:	2301      	movs	r3, #1
 8001972:	4642      	mov	r2, r8
 8001974:	7013      	strb	r3, [r2, #0]
	  if(wakeUpFlag || (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) == 1 && firstMsg)){ // || HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) == 1
 8001976:	7823      	ldrb	r3, [r4, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <main+0x1de>
		  if(getMsg == 1){
 800197c:	4b4c      	ldr	r3, [pc, #304]	; (8001ab0 <main+0x2d0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d028      	beq.n	80019d6 <main+0x1f6>
	  if(readyReception){ // AT+CMGF=1\r\n
 8001984:	4b4b      	ldr	r3, [pc, #300]	; (8001ab4 <main+0x2d4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d14a      	bne.n	8001a22 <main+0x242>
	  if(setup1Flag){ // AT+CSCS=\"GSM\"\r\n
 800198c:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <main+0x2d8>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d156      	bne.n	8001a42 <main+0x262>
	  if(setup2Flag){
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <main+0x2dc>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d162      	bne.n	8001a62 <main+0x282>
	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_5) == 1){
 800199c:	2120      	movs	r1, #32
 800199e:	483a      	ldr	r0, [pc, #232]	; (8001a88 <main+0x2a8>)
 80019a0:	f7fe fde4 	bl	800056c <HAL_GPIO_ReadPin>
 80019a4:	2801      	cmp	r0, #1
 80019a6:	d0de      	beq.n	8001966 <main+0x186>
		  if(outputState){
 80019a8:	7833      	ldrb	r3, [r6, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0e3      	beq.n	8001976 <main+0x196>
			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2110      	movs	r1, #16
 80019b2:	4835      	ldr	r0, [pc, #212]	; (8001a88 <main+0x2a8>)
 80019b4:	f7fe fde0 	bl	8000578 <HAL_GPIO_WritePin>
			  outputState = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	703b      	strb	r3, [r7, #0]
 80019bc:	e7db      	b.n	8001976 <main+0x196>
	  if(wakeUpFlag || (HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) == 1 && firstMsg)){ // || HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) == 1
 80019be:	2110      	movs	r1, #16
 80019c0:	2090      	movs	r0, #144	; 0x90
 80019c2:	05c0      	lsls	r0, r0, #23
 80019c4:	f7fe fdd2 	bl	800056c <HAL_GPIO_ReadPin>
 80019c8:	2801      	cmp	r0, #1
 80019ca:	d1db      	bne.n	8001984 <main+0x1a4>
 80019cc:	4b3c      	ldr	r3, [pc, #240]	; (8001ac0 <main+0x2e0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0d7      	beq.n	8001984 <main+0x1a4>
 80019d4:	e7d2      	b.n	800197c <main+0x19c>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 80019d6:	4d2c      	ldr	r5, [pc, #176]	; (8001a88 <main+0x2a8>)
 80019d8:	2201      	movs	r2, #1
 80019da:	2104      	movs	r1, #4
 80019dc:	0028      	movs	r0, r5
 80019de:	f7fe fdcb 	bl	8000578 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 80019e2:	20c8      	movs	r0, #200	; 0xc8
 80019e4:	f7fe fc54 	bl	8000290 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 80019e8:	2200      	movs	r2, #0
 80019ea:	2104      	movs	r1, #4
 80019ec:	0028      	movs	r0, r5
 80019ee:	f7fe fdc3 	bl	8000578 <HAL_GPIO_WritePin>
				HAL_Delay(200);
 80019f2:	20c8      	movs	r0, #200	; 0xc8
 80019f4:	f7fe fc4c 	bl	8000290 <HAL_Delay>
				wakeUpFlag = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	4a2c      	ldr	r2, [pc, #176]	; (8001aac <main+0x2cc>)
 80019fc:	7013      	strb	r3, [r2, #0]
				rxFlag = 0;
 80019fe:	4a31      	ldr	r2, [pc, #196]	; (8001ac4 <main+0x2e4>)
 8001a00:	7013      	strb	r3, [r2, #0]
				getMsg = 0;
 8001a02:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <main+0x2d0>)
 8001a04:	6013      	str	r3, [r2, #0]
				HAL_Delay(100);
 8001a06:	2064      	movs	r0, #100	; 0x64
 8001a08:	f7fe fc42 	bl	8000290 <HAL_Delay>
				HAL_UART_Transmit(&huart1,(uint8_t *)simReception,strlen(simReception),100);
 8001a0c:	4d2e      	ldr	r5, [pc, #184]	; (8001ac8 <main+0x2e8>)
 8001a0e:	0028      	movs	r0, r5
 8001a10:	f7fe fb7a 	bl	8000108 <strlen>
 8001a14:	b282      	uxth	r2, r0
 8001a16:	2364      	movs	r3, #100	; 0x64
 8001a18:	0029      	movs	r1, r5
 8001a1a:	481c      	ldr	r0, [pc, #112]	; (8001a8c <main+0x2ac>)
 8001a1c:	f7ff fbfe 	bl	800121c <HAL_UART_Transmit>
 8001a20:	e7b0      	b.n	8001984 <main+0x1a4>
			HAL_UART_Transmit(&huart1, (uint8_t *)simSetup1,strlen(simSetup1),100);
 8001a22:	4d2a      	ldr	r5, [pc, #168]	; (8001acc <main+0x2ec>)
 8001a24:	0028      	movs	r0, r5
 8001a26:	f7fe fb6f 	bl	8000108 <strlen>
 8001a2a:	b282      	uxth	r2, r0
 8001a2c:	2364      	movs	r3, #100	; 0x64
 8001a2e:	0029      	movs	r1, r5
 8001a30:	4816      	ldr	r0, [pc, #88]	; (8001a8c <main+0x2ac>)
 8001a32:	f7ff fbf3 	bl	800121c <HAL_UART_Transmit>
			readyReception = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <main+0x2d4>)
 8001a3a:	7013      	strb	r3, [r2, #0]
			rxFlag = 0;
 8001a3c:	4a21      	ldr	r2, [pc, #132]	; (8001ac4 <main+0x2e4>)
 8001a3e:	7013      	strb	r3, [r2, #0]
 8001a40:	e7a4      	b.n	800198c <main+0x1ac>
			HAL_UART_Transmit(&huart1, (uint8_t *)simSetup2,strlen(simSetup2),100);
 8001a42:	4d23      	ldr	r5, [pc, #140]	; (8001ad0 <main+0x2f0>)
 8001a44:	0028      	movs	r0, r5
 8001a46:	f7fe fb5f 	bl	8000108 <strlen>
 8001a4a:	b282      	uxth	r2, r0
 8001a4c:	2364      	movs	r3, #100	; 0x64
 8001a4e:	0029      	movs	r1, r5
 8001a50:	480e      	ldr	r0, [pc, #56]	; (8001a8c <main+0x2ac>)
 8001a52:	f7ff fbe3 	bl	800121c <HAL_UART_Transmit>
			setup1Flag = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <main+0x2d8>)
 8001a5a:	7013      	strb	r3, [r2, #0]
			rxFlag = 0;
 8001a5c:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <main+0x2e4>)
 8001a5e:	7013      	strb	r3, [r2, #0]
 8001a60:	e798      	b.n	8001994 <main+0x1b4>
	  		  HAL_UART_Transmit(&huart1, (uint8_t *)message2Phone,strlen(message2Phone),100);
 8001a62:	4d1c      	ldr	r5, [pc, #112]	; (8001ad4 <main+0x2f4>)
 8001a64:	0028      	movs	r0, r5
 8001a66:	f7fe fb4f 	bl	8000108 <strlen>
 8001a6a:	b282      	uxth	r2, r0
 8001a6c:	2364      	movs	r3, #100	; 0x64
 8001a6e:	0029      	movs	r1, r5
 8001a70:	4806      	ldr	r0, [pc, #24]	; (8001a8c <main+0x2ac>)
 8001a72:	f7ff fbd3 	bl	800121c <HAL_UART_Transmit>
	  		  setup2Flag = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	4a10      	ldr	r2, [pc, #64]	; (8001abc <main+0x2dc>)
 8001a7a:	7013      	strb	r3, [r2, #0]
	  		  rxFlag = 0;
 8001a7c:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <main+0x2e4>)
 8001a7e:	7013      	strb	r3, [r2, #0]
 8001a80:	e78c      	b.n	800199c <main+0x1bc>
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	40021000 	.word	0x40021000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	200000a4 	.word	0x200000a4
 8001a90:	40013800 	.word	0x40013800
 8001a94:	20000114 	.word	0x20000114
 8001a98:	40004c00 	.word	0x40004c00
 8001a9c:	000005dc 	.word	0x000005dc
 8001aa0:	00000bb8 	.word	0x00000bb8
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20000094 	.word	0x20000094
 8001aac:	20000254 	.word	0x20000254
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	2000024d 	.word	0x2000024d
 8001ab8:	20000257 	.word	0x20000257
 8001abc:	20000252 	.word	0x20000252
 8001ac0:	20000090 	.word	0x20000090
 8001ac4:	20000255 	.word	0x20000255
 8001ac8:	20000048 	.word	0x20000048
 8001acc:	20000054 	.word	0x20000054
 8001ad0:	20000060 	.word	0x20000060
 8001ad4:	2000000c 	.word	0x2000000c

08001ad8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{

}
 8001ad8:	4770      	bx	lr

08001ada <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

}
 8001ada:	4770      	bx	lr

08001adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001adc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <HAL_MspInit+0x2c>)
 8001ae0:	6999      	ldr	r1, [r3, #24]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4311      	orrs	r1, r2
 8001ae6:	6199      	str	r1, [r3, #24]
 8001ae8:	6999      	ldr	r1, [r3, #24]
 8001aea:	400a      	ands	r2, r1
 8001aec:	9200      	str	r2, [sp, #0]
 8001aee:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	69da      	ldr	r2, [r3, #28]
 8001af2:	2180      	movs	r1, #128	; 0x80
 8001af4:	0549      	lsls	r1, r1, #21
 8001af6:	430a      	orrs	r2, r1
 8001af8:	61da      	str	r2, [r3, #28]
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	400b      	ands	r3, r1
 8001afe:	9301      	str	r3, [sp, #4]
 8001b00:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b02:	b002      	add	sp, #8
 8001b04:	4770      	bx	lr
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	40021000 	.word	0x40021000

08001b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	2214      	movs	r2, #20
 8001b14:	2100      	movs	r1, #0
 8001b16:	a805      	add	r0, sp, #20
 8001b18:	f000 fa86 	bl	8002028 <memset>
  if(huart->Instance==USART1)
 8001b1c:	6823      	ldr	r3, [r4, #0]
 8001b1e:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <HAL_UART_MspInit+0xc8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d004      	beq.n	8001b2e <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART4)
 8001b24:	4a2c      	ldr	r2, [pc, #176]	; (8001bd8 <HAL_UART_MspInit+0xcc>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d02b      	beq.n	8001b82 <HAL_UART_MspInit+0x76>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8001b2a:	b00a      	add	sp, #40	; 0x28
 8001b2c:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	; (8001bdc <HAL_UART_MspInit+0xd0>)
 8001b30:	6999      	ldr	r1, [r3, #24]
 8001b32:	2080      	movs	r0, #128	; 0x80
 8001b34:	01c0      	lsls	r0, r0, #7
 8001b36:	4301      	orrs	r1, r0
 8001b38:	6199      	str	r1, [r3, #24]
 8001b3a:	699a      	ldr	r2, [r3, #24]
 8001b3c:	4002      	ands	r2, r0
 8001b3e:	9201      	str	r2, [sp, #4]
 8001b40:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	695a      	ldr	r2, [r3, #20]
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	0289      	lsls	r1, r1, #10
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	400b      	ands	r3, r1
 8001b50:	9302      	str	r3, [sp, #8]
 8001b52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b54:	23c0      	movs	r3, #192	; 0xc0
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5e:	3301      	adds	r3, #1
 8001b60:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001b62:	3b02      	subs	r3, #2
 8001b64:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	a905      	add	r1, sp, #20
 8001b68:	2090      	movs	r0, #144	; 0x90
 8001b6a:	05c0      	lsls	r0, r0, #23
 8001b6c:	f7fe fc22 	bl	80003b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	201b      	movs	r0, #27
 8001b76:	f7fe fb9d 	bl	80002b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7a:	201b      	movs	r0, #27
 8001b7c:	f7fe fbce 	bl	800031c <HAL_NVIC_EnableIRQ>
 8001b80:	e7d3      	b.n	8001b2a <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART4_CLK_ENABLE();
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_UART_MspInit+0xd0>)
 8001b84:	69d9      	ldr	r1, [r3, #28]
 8001b86:	2080      	movs	r0, #128	; 0x80
 8001b88:	0300      	lsls	r0, r0, #12
 8001b8a:	4301      	orrs	r1, r0
 8001b8c:	61d9      	str	r1, [r3, #28]
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	4002      	ands	r2, r0
 8001b92:	9203      	str	r2, [sp, #12]
 8001b94:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0289      	lsls	r1, r1, #10
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	615a      	str	r2, [r3, #20]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	400b      	ands	r3, r1
 8001ba4:	9304      	str	r3, [sp, #16]
 8001ba6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2202      	movs	r2, #2
 8001bae:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	a905      	add	r1, sp, #20
 8001bb8:	2090      	movs	r0, #144	; 0x90
 8001bba:	05c0      	lsls	r0, r0, #23
 8001bbc:	f7fe fbfa 	bl	80003b4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	201d      	movs	r0, #29
 8001bc6:	f7fe fb75 	bl	80002b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001bca:	201d      	movs	r0, #29
 8001bcc:	f7fe fba6 	bl	800031c <HAL_NVIC_EnableIRQ>
}
 8001bd0:	e7ab      	b.n	8001b2a <HAL_UART_MspInit+0x1e>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40004c00 	.word	0x40004c00
 8001bdc:	40021000 	.word	0x40021000

08001be0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be0:	4770      	bx	lr

08001be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be2:	e7fe      	b.n	8001be2 <HardFault_Handler>

08001be4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be6:	4770      	bx	lr

08001be8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001be8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bea:	f7fe fb43 	bl	8000274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bee:	bd10      	pop	{r4, pc}

08001bf0 <USART1_IRQHandler>:
/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
int slashCounter = 0;
void USART1_IRQHandler(void)
{
 8001bf0:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	  HAL_UART_Receive(&huart1,(uint8_t *)rxByte,1,100);
 8001bf2:	4cb9      	ldr	r4, [pc, #740]	; (8001ed8 <USART1_IRQHandler+0x2e8>)
 8001bf4:	4db9      	ldr	r5, [pc, #740]	; (8001edc <USART1_IRQHandler+0x2ec>)
 8001bf6:	2364      	movs	r3, #100	; 0x64
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	0021      	movs	r1, r4
 8001bfc:	0028      	movs	r0, r5
 8001bfe:	f7ff fb7f 	bl	8001300 <HAL_UART_Receive>
	  HAL_UART_IRQHandler(&huart1);
 8001c02:	0028      	movs	r0, r5
 8001c04:	f7ff fd1c 	bl	8001640 <HAL_UART_IRQHandler>
	  rxData[rxCounter++] = rxByte[0];
 8001c08:	4ab5      	ldr	r2, [pc, #724]	; (8001ee0 <USART1_IRQHandler+0x2f0>)
 8001c0a:	7813      	ldrb	r3, [r2, #0]
 8001c0c:	1c59      	adds	r1, r3, #1
 8001c0e:	7011      	strb	r1, [r2, #0]
 8001c10:	7822      	ldrb	r2, [r4, #0]
 8001c12:	49b4      	ldr	r1, [pc, #720]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001c14:	54ca      	strb	r2, [r1, r3]
	  fullCounter++;
 8001c16:	49b4      	ldr	r1, [pc, #720]	; (8001ee8 <USART1_IRQHandler+0x2f8>)
 8001c18:	680b      	ldr	r3, [r1, #0]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	600b      	str	r3, [r1, #0]

if(rxByte[0] == '\n'){
 8001c1e:	2a0a      	cmp	r2, #10
 8001c20:	d000      	beq.n	8001c24 <USART1_IRQHandler+0x34>
			HAL_Delay(200);
		}
}
}
  /* USER CODE END USART1_IRQn 1 */
}
 8001c22:	bd70      	pop	{r4, r5, r6, pc}
	slashCounter++;
 8001c24:	4ab1      	ldr	r2, [pc, #708]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001c26:	6813      	ldr	r3, [r2, #0]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	6013      	str	r3, [r2, #0]
	if(slashCounter == 6 && queue == 0){ // call and sms ready
 8001c2c:	2b06      	cmp	r3, #6
 8001c2e:	d02a      	beq.n	8001c86 <USART1_IRQHandler+0x96>
if(slashCounter == 4 && queue == 1){ // signal quality
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d03e      	beq.n	8001cb2 <USART1_IRQHandler+0xc2>
if(slashCounter == 2 && queue == 2){
 8001c34:	4bad      	ldr	r3, [pc, #692]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d13e      	bne.n	8001cba <USART1_IRQHandler+0xca>
 8001c3c:	4bac      	ldr	r3, [pc, #688]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d100      	bne.n	8001c46 <USART1_IRQHandler+0x56>
 8001c44:	e0e6      	b.n	8001e14 <USART1_IRQHandler+0x224>
if(slashCounter == 2 && queue == 3){
 8001c46:	4baa      	ldr	r3, [pc, #680]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d1e9      	bne.n	8001c22 <USART1_IRQHandler+0x32>
	if(rxData[16] == 'O' && rxData[17] == 'K'){
 8001c4e:	4ba5      	ldr	r3, [pc, #660]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001c50:	7c1b      	ldrb	r3, [r3, #16]
 8001c52:	2b4f      	cmp	r3, #79	; 0x4f
 8001c54:	d100      	bne.n	8001c58 <USART1_IRQHandler+0x68>
 8001c56:	e10d      	b.n	8001e74 <USART1_IRQHandler+0x284>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8001c58:	4ca6      	ldr	r4, [pc, #664]	; (8001ef4 <USART1_IRQHandler+0x304>)
 8001c5a:	2104      	movs	r1, #4
 8001c5c:	0020      	movs	r0, r4
 8001c5e:	f7fe fc91 	bl	8000584 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001c62:	20c8      	movs	r0, #200	; 0xc8
 8001c64:	f7fe fb14 	bl	8000290 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8001c68:	2104      	movs	r1, #4
 8001c6a:	0020      	movs	r0, r4
 8001c6c:	f7fe fc8a 	bl	8000584 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001c70:	20c8      	movs	r0, #200	; 0xc8
 8001c72:	f7fe fb0d 	bl	8000290 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8001c76:	2104      	movs	r1, #4
 8001c78:	0020      	movs	r0, r4
 8001c7a:	f7fe fc83 	bl	8000584 <HAL_GPIO_TogglePin>
		HAL_Delay(200);
 8001c7e:	20c8      	movs	r0, #200	; 0xc8
 8001c80:	f7fe fb06 	bl	8000290 <HAL_Delay>
 8001c84:	e019      	b.n	8001cba <USART1_IRQHandler+0xca>
	if(slashCounter == 6 && queue == 0){ // call and sms ready
 8001c86:	4b9a      	ldr	r3, [pc, #616]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d115      	bne.n	8001cba <USART1_IRQHandler+0xca>
		  memset(rxData,'\0',sizeof(rxData));
 8001c8e:	22c8      	movs	r2, #200	; 0xc8
 8001c90:	2100      	movs	r1, #0
 8001c92:	4894      	ldr	r0, [pc, #592]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001c94:	f000 f9c8 	bl	8002028 <memset>
		  wakeUpFlag = 1;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	4b97      	ldr	r3, [pc, #604]	; (8001ef8 <USART1_IRQHandler+0x308>)
 8001c9c:	701a      	strb	r2, [r3, #0]
		  rxCounter = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	498f      	ldr	r1, [pc, #572]	; (8001ee0 <USART1_IRQHandler+0x2f0>)
 8001ca2:	700b      	strb	r3, [r1, #0]
		  queue++;
 8001ca4:	4992      	ldr	r1, [pc, #584]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001ca6:	700a      	strb	r2, [r1, #0]
		  slashCounter = 0;
 8001ca8:	4a90      	ldr	r2, [pc, #576]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001caa:	6013      	str	r3, [r2, #0]
		  rxByte[0] = '\0';
 8001cac:	4a8a      	ldr	r2, [pc, #552]	; (8001ed8 <USART1_IRQHandler+0x2e8>)
 8001cae:	7013      	strb	r3, [r2, #0]
 8001cb0:	e003      	b.n	8001cba <USART1_IRQHandler+0xca>
if(slashCounter == 4 && queue == 1){ // signal quality
 8001cb2:	4b8f      	ldr	r3, [pc, #572]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d023      	beq.n	8001d02 <USART1_IRQHandler+0x112>
if(slashCounter == 5  && queue == 4){
 8001cba:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d1af      	bne.n	8001c22 <USART1_IRQHandler+0x32>
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d1ab      	bne.n	8001c22 <USART1_IRQHandler+0x32>
	if(rxData[0] == 'A' && rxData[1] == 'T'){
 8001cca:	4b86      	ldr	r3, [pc, #536]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b41      	cmp	r3, #65	; 0x41
 8001cd0:	d100      	bne.n	8001cd4 <USART1_IRQHandler+0xe4>
 8001cd2:	e0e7      	b.n	8001ea4 <USART1_IRQHandler+0x2b4>
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8001cd4:	4c87      	ldr	r4, [pc, #540]	; (8001ef4 <USART1_IRQHandler+0x304>)
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	0020      	movs	r0, r4
 8001cda:	f7fe fc53 	bl	8000584 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001cde:	20c8      	movs	r0, #200	; 0xc8
 8001ce0:	f7fe fad6 	bl	8000290 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	0020      	movs	r0, r4
 8001ce8:	f7fe fc4c 	bl	8000584 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001cec:	20c8      	movs	r0, #200	; 0xc8
 8001cee:	f7fe facf 	bl	8000290 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8001cf2:	2104      	movs	r1, #4
 8001cf4:	0020      	movs	r0, r4
 8001cf6:	f7fe fc45 	bl	8000584 <HAL_GPIO_TogglePin>
			HAL_Delay(200);
 8001cfa:	20c8      	movs	r0, #200	; 0xc8
 8001cfc:	f7fe fac8 	bl	8000290 <HAL_Delay>
}
 8001d00:	e78f      	b.n	8001c22 <USART1_IRQHandler+0x32>
	  if(rxData[15] == '1' || rxData[15] == '2'){
 8001d02:	4b78      	ldr	r3, [pc, #480]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001d04:	7bdb      	ldrb	r3, [r3, #15]
 8001d06:	001a      	movs	r2, r3
 8001d08:	3a31      	subs	r2, #49	; 0x31
 8001d0a:	2a01      	cmp	r2, #1
 8001d0c:	d96f      	bls.n	8001dee <USART1_IRQHandler+0x1fe>
	  else if(rxData[15] == '9'){
 8001d0e:	2b39      	cmp	r3, #57	; 0x39
 8001d10:	d1d3      	bne.n	8001cba <USART1_IRQHandler+0xca>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001d12:	4d78      	ldr	r5, [pc, #480]	; (8001ef4 <USART1_IRQHandler+0x304>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	2104      	movs	r1, #4
 8001d18:	0028      	movs	r0, r5
 8001d1a:	f7fe fc2d 	bl	8000578 <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8001d1e:	24c8      	movs	r4, #200	; 0xc8
 8001d20:	0064      	lsls	r4, r4, #1
 8001d22:	0020      	movs	r0, r4
 8001d24:	f7fe fab4 	bl	8000290 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2104      	movs	r1, #4
 8001d2c:	0028      	movs	r0, r5
 8001d2e:	f7fe fc23 	bl	8000578 <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8001d32:	0020      	movs	r0, r4
 8001d34:	f7fe faac 	bl	8000290 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	0028      	movs	r0, r5
 8001d3e:	f7fe fc1b 	bl	8000578 <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8001d42:	0020      	movs	r0, r4
 8001d44:	f7fe faa4 	bl	8000290 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2104      	movs	r1, #4
 8001d4c:	0028      	movs	r0, r5
 8001d4e:	f7fe fc13 	bl	8000578 <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8001d52:	0020      	movs	r0, r4
 8001d54:	f7fe fa9c 	bl	8000290 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	0028      	movs	r0, r5
 8001d5e:	f7fe fc0b 	bl	8000578 <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8001d62:	0020      	movs	r0, r4
 8001d64:	f7fe fa94 	bl	8000290 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2104      	movs	r1, #4
 8001d6c:	0028      	movs	r0, r5
 8001d6e:	f7fe fc03 	bl	8000578 <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8001d72:	0020      	movs	r0, r4
 8001d74:	f7fe fa8c 	bl	8000290 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_SET);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	0028      	movs	r0, r5
 8001d7e:	f7fe fbfb 	bl	8000578 <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8001d82:	0020      	movs	r0, r4
 8001d84:	f7fe fa84 	bl	8000290 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2,GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	0028      	movs	r0, r5
 8001d8e:	f7fe fbf3 	bl	8000578 <HAL_GPIO_WritePin>
			HAL_Delay(400);
 8001d92:	0020      	movs	r0, r4
 8001d94:	f7fe fa7c 	bl	8000290 <HAL_Delay>
			  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_SET);
 8001d98:	2580      	movs	r5, #128	; 0x80
 8001d9a:	006d      	lsls	r5, r5, #1
 8001d9c:	2490      	movs	r4, #144	; 0x90
 8001d9e:	05e4      	lsls	r4, r4, #23
 8001da0:	2201      	movs	r2, #1
 8001da2:	0029      	movs	r1, r5
 8001da4:	0020      	movs	r0, r4
 8001da6:	f7fe fbe7 	bl	8000578 <HAL_GPIO_WritePin>
			    HAL_Delay(1500);
 8001daa:	4854      	ldr	r0, [pc, #336]	; (8001efc <USART1_IRQHandler+0x30c>)
 8001dac:	f7fe fa70 	bl	8000290 <HAL_Delay>
			    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_8,GPIO_PIN_RESET);
 8001db0:	2200      	movs	r2, #0
 8001db2:	0029      	movs	r1, r5
 8001db4:	0020      	movs	r0, r4
 8001db6:	f7fe fbdf 	bl	8000578 <HAL_GPIO_WritePin>
			    HAL_Delay(3000);
 8001dba:	4851      	ldr	r0, [pc, #324]	; (8001f00 <USART1_IRQHandler+0x310>)
 8001dbc:	f7fe fa68 	bl	8000290 <HAL_Delay>
				 HAL_UART_Transmit(&huart1,(uint8_t *)atCommand,strlen(atCommand),100);
 8001dc0:	4c50      	ldr	r4, [pc, #320]	; (8001f04 <USART1_IRQHandler+0x314>)
 8001dc2:	0020      	movs	r0, r4
 8001dc4:	f7fe f9a0 	bl	8000108 <strlen>
 8001dc8:	b282      	uxth	r2, r0
 8001dca:	2364      	movs	r3, #100	; 0x64
 8001dcc:	0021      	movs	r1, r4
 8001dce:	4843      	ldr	r0, [pc, #268]	; (8001edc <USART1_IRQHandler+0x2ec>)
 8001dd0:	f7ff fa24 	bl	800121c <HAL_UART_Transmit>
				 HAL_Delay(2000);
 8001dd4:	20fa      	movs	r0, #250	; 0xfa
 8001dd6:	00c0      	lsls	r0, r0, #3
 8001dd8:	f7fe fa5a 	bl	8000290 <HAL_Delay>
				 queue = 0;
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4b44      	ldr	r3, [pc, #272]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001de0:	701a      	strb	r2, [r3, #0]
if(slashCounter == 2 && queue == 2){
 8001de2:	4b42      	ldr	r3, [pc, #264]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d000      	beq.n	8001dec <USART1_IRQHandler+0x1fc>
 8001dea:	e766      	b.n	8001cba <USART1_IRQHandler+0xca>
 8001dec:	e72b      	b.n	8001c46 <USART1_IRQHandler+0x56>
		  memset(rxData,'\0',sizeof(rxData));
 8001dee:	22c8      	movs	r2, #200	; 0xc8
 8001df0:	2100      	movs	r1, #0
 8001df2:	483c      	ldr	r0, [pc, #240]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001df4:	f000 f918 	bl	8002028 <memset>
		  readyReception = 1;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <USART1_IRQHandler+0x318>)
 8001dfc:	701a      	strb	r2, [r3, #0]
		  rxCounter = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	4a37      	ldr	r2, [pc, #220]	; (8001ee0 <USART1_IRQHandler+0x2f0>)
 8001e02:	7013      	strb	r3, [r2, #0]
		  queue++;
 8001e04:	2102      	movs	r1, #2
 8001e06:	4a3a      	ldr	r2, [pc, #232]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001e08:	7011      	strb	r1, [r2, #0]
		  slashCounter = 0;
 8001e0a:	4a38      	ldr	r2, [pc, #224]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001e0c:	6013      	str	r3, [r2, #0]
		  rxByte[0] = '\0';
 8001e0e:	4a32      	ldr	r2, [pc, #200]	; (8001ed8 <USART1_IRQHandler+0x2e8>)
 8001e10:	7013      	strb	r3, [r2, #0]
 8001e12:	e752      	b.n	8001cba <USART1_IRQHandler+0xca>
	if(rxData[12] == 'O' && rxData[13] == 'K'){
 8001e14:	4b33      	ldr	r3, [pc, #204]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001e16:	7b1b      	ldrb	r3, [r3, #12]
 8001e18:	2b4f      	cmp	r3, #79	; 0x4f
 8001e1a:	d014      	beq.n	8001e46 <USART1_IRQHandler+0x256>
		HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8001e1c:	4c35      	ldr	r4, [pc, #212]	; (8001ef4 <USART1_IRQHandler+0x304>)
 8001e1e:	2104      	movs	r1, #4
 8001e20:	0020      	movs	r0, r4
 8001e22:	f7fe fbaf 	bl	8000584 <HAL_GPIO_TogglePin>
	    HAL_Delay(200);
 8001e26:	20c8      	movs	r0, #200	; 0xc8
 8001e28:	f7fe fa32 	bl	8000290 <HAL_Delay>
	    HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_2);
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	0020      	movs	r0, r4
 8001e30:	f7fe fba8 	bl	8000584 <HAL_GPIO_TogglePin>
	    HAL_Delay(200);
 8001e34:	20c8      	movs	r0, #200	; 0xc8
 8001e36:	f7fe fa2b 	bl	8000290 <HAL_Delay>
if(slashCounter == 2 && queue == 3){
 8001e3a:	4b2c      	ldr	r3, [pc, #176]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d100      	bne.n	8001e44 <USART1_IRQHandler+0x254>
 8001e42:	e700      	b.n	8001c46 <USART1_IRQHandler+0x56>
 8001e44:	e739      	b.n	8001cba <USART1_IRQHandler+0xca>
	if(rxData[12] == 'O' && rxData[13] == 'K'){
 8001e46:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001e48:	7b5b      	ldrb	r3, [r3, #13]
 8001e4a:	2b4b      	cmp	r3, #75	; 0x4b
 8001e4c:	d1e6      	bne.n	8001e1c <USART1_IRQHandler+0x22c>
		memset(rxData,'\0',sizeof(rxData));
 8001e4e:	22c8      	movs	r2, #200	; 0xc8
 8001e50:	2100      	movs	r1, #0
 8001e52:	4824      	ldr	r0, [pc, #144]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001e54:	f000 f8e8 	bl	8002028 <memset>
		setup1Flag = 1;
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <USART1_IRQHandler+0x31c>)
 8001e5c:	701a      	strb	r2, [r3, #0]
		rxCounter = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <USART1_IRQHandler+0x2f0>)
 8001e62:	7013      	strb	r3, [r2, #0]
		queue++;
 8001e64:	2103      	movs	r1, #3
 8001e66:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001e68:	7011      	strb	r1, [r2, #0]
		slashCounter = 0;
 8001e6a:	4a20      	ldr	r2, [pc, #128]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001e6c:	6013      	str	r3, [r2, #0]
		rxByte[0] = '\0';
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <USART1_IRQHandler+0x2e8>)
 8001e70:	7013      	strb	r3, [r2, #0]
 8001e72:	e6d6      	b.n	8001c22 <USART1_IRQHandler+0x32>
	if(rxData[16] == 'O' && rxData[17] == 'K'){
 8001e74:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001e76:	7c5b      	ldrb	r3, [r3, #17]
 8001e78:	2b4b      	cmp	r3, #75	; 0x4b
 8001e7a:	d000      	beq.n	8001e7e <USART1_IRQHandler+0x28e>
 8001e7c:	e6ec      	b.n	8001c58 <USART1_IRQHandler+0x68>
		memset(rxData,'\0',sizeof(rxData));
 8001e7e:	22c8      	movs	r2, #200	; 0xc8
 8001e80:	2100      	movs	r1, #0
 8001e82:	4818      	ldr	r0, [pc, #96]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001e84:	f000 f8d0 	bl	8002028 <memset>
		setup2Flag = 1;
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <USART1_IRQHandler+0x320>)
 8001e8c:	701a      	strb	r2, [r3, #0]
		rxCounter = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	4a13      	ldr	r2, [pc, #76]	; (8001ee0 <USART1_IRQHandler+0x2f0>)
 8001e92:	7013      	strb	r3, [r2, #0]
		queue++;
 8001e94:	2104      	movs	r1, #4
 8001e96:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001e98:	7011      	strb	r1, [r2, #0]
		slashCounter = 0;
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001e9c:	6013      	str	r3, [r2, #0]
		rxByte[0] = '\0';
 8001e9e:	4a0e      	ldr	r2, [pc, #56]	; (8001ed8 <USART1_IRQHandler+0x2e8>)
 8001ea0:	7013      	strb	r3, [r2, #0]
	if(rxData[16] == 'O' && rxData[17] == 'K'){
 8001ea2:	e6be      	b.n	8001c22 <USART1_IRQHandler+0x32>
	if(rxData[0] == 'A' && rxData[1] == 'T'){
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	2b54      	cmp	r3, #84	; 0x54
 8001eaa:	d000      	beq.n	8001eae <USART1_IRQHandler+0x2be>
 8001eac:	e712      	b.n	8001cd4 <USART1_IRQHandler+0xe4>
			memset(rxData,'\0',sizeof(rxData));
 8001eae:	22c8      	movs	r2, #200	; 0xc8
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <USART1_IRQHandler+0x2f4>)
 8001eb4:	f000 f8b8 	bl	8002028 <memset>
			rxCounter = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	4a09      	ldr	r2, [pc, #36]	; (8001ee0 <USART1_IRQHandler+0x2f0>)
 8001ebc:	7013      	strb	r3, [r2, #0]
			queue = 1;
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	490b      	ldr	r1, [pc, #44]	; (8001ef0 <USART1_IRQHandler+0x300>)
 8001ec2:	700a      	strb	r2, [r1, #0]
			getMsg = 1;
 8001ec4:	4913      	ldr	r1, [pc, #76]	; (8001f14 <USART1_IRQHandler+0x324>)
 8001ec6:	600a      	str	r2, [r1, #0]
			firstMsg = 1;
 8001ec8:	4913      	ldr	r1, [pc, #76]	; (8001f18 <USART1_IRQHandler+0x328>)
 8001eca:	600a      	str	r2, [r1, #0]
			slashCounter = 0;
 8001ecc:	4a07      	ldr	r2, [pc, #28]	; (8001eec <USART1_IRQHandler+0x2fc>)
 8001ece:	6013      	str	r3, [r2, #0]
			rxByte[0] = '\0';
 8001ed0:	4a01      	ldr	r2, [pc, #4]	; (8001ed8 <USART1_IRQHandler+0x2e8>)
 8001ed2:	7013      	strb	r3, [r2, #0]
	if(rxData[0] == 'A' && rxData[1] == 'T'){
 8001ed4:	e6a5      	b.n	8001c22 <USART1_IRQHandler+0x32>
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	20000250 	.word	0x20000250
 8001edc:	200000a4 	.word	0x200000a4
 8001ee0:	20000253 	.word	0x20000253
 8001ee4:	20000184 	.word	0x20000184
 8001ee8:	20000098 	.word	0x20000098
 8001eec:	2000009c 	.word	0x2000009c
 8001ef0:	2000024c 	.word	0x2000024c
 8001ef4:	48000400 	.word	0x48000400
 8001ef8:	20000254 	.word	0x20000254
 8001efc:	000005dc 	.word	0x000005dc
 8001f00:	00000bb8 	.word	0x00000bb8
 8001f04:	20000000 	.word	0x20000000
 8001f08:	2000024d 	.word	0x2000024d
 8001f0c:	20000257 	.word	0x20000257
 8001f10:	20000252 	.word	0x20000252
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000090 	.word	0x20000090

08001f1c <USART3_4_IRQHandler>:
/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */

void USART3_4_IRQHandler(void)
{
 8001f1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART3_4_IRQn 0 */
  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001f1e:	4802      	ldr	r0, [pc, #8]	; (8001f28 <USART3_4_IRQHandler+0xc>)
 8001f20:	f7ff fb8e 	bl	8001640 <HAL_UART_IRQHandler>
  	  rxFlag = 1;
  	  rxCounter = 0;
    }
*/
  /* USER CODE END USART3_4_IRQn 1 */
}
 8001f24:	bd10      	pop	{r4, pc}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	20000114 	.word	0x20000114

08001f2c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <SystemInit+0x48>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	430a      	orrs	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	480f      	ldr	r0, [pc, #60]	; (8001f78 <SystemInit+0x4c>)
 8001f3a:	4002      	ands	r2, r0
 8001f3c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	480e      	ldr	r0, [pc, #56]	; (8001f7c <SystemInit+0x50>)
 8001f42:	4002      	ands	r2, r0
 8001f44:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	480d      	ldr	r0, [pc, #52]	; (8001f80 <SystemInit+0x54>)
 8001f4a:	4002      	ands	r2, r0
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	480c      	ldr	r0, [pc, #48]	; (8001f84 <SystemInit+0x58>)
 8001f52:	4002      	ands	r2, r0
 8001f54:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f58:	200f      	movs	r0, #15
 8001f5a:	4382      	bics	r2, r0
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8001f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f60:	4809      	ldr	r0, [pc, #36]	; (8001f88 <SystemInit+0x5c>)
 8001f62:	4002      	ands	r2, r0
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f68:	438a      	bics	r2, r1
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]

}
 8001f70:	4770      	bx	lr
 8001f72:	46c0      	nop			; (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000
 8001f78:	08ffb80c 	.word	0x08ffb80c
 8001f7c:	fef6ffff 	.word	0xfef6ffff
 8001f80:	fffbffff 	.word	0xfffbffff
 8001f84:	ffc0ffff 	.word	0xffc0ffff
 8001f88:	fffcfe2c 	.word	0xfffcfe2c

08001f8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f8e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f90:	480d      	ldr	r0, [pc, #52]	; (8001fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f92:	490e      	ldr	r1, [pc, #56]	; (8001fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f94:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <LoopForever+0xe>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f98:	e002      	b.n	8001fa0 <LoopCopyDataInit>

08001f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9e:	3304      	adds	r3, #4

08001fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa4:	d3f9      	bcc.n	8001f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa6:	4a0b      	ldr	r2, [pc, #44]	; (8001fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fa8:	4c0b      	ldr	r4, [pc, #44]	; (8001fd8 <LoopForever+0x16>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fac:	e001      	b.n	8001fb2 <LoopFillZerobss>

08001fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb0:	3204      	adds	r2, #4

08001fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb4:	d3fb      	bcc.n	8001fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001fb6:	f7ff ffb9 	bl	8001f2c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001fba:	f000 f811 	bl	8001fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fbe:	f7ff fc0f 	bl	80017e0 <main>

08001fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fc2:	e7fe      	b.n	8001fc2 <LoopForever>
  ldr   r0, =_estack
 8001fc4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fcc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001fd0:	08002090 	.word	0x08002090
  ldr r2, =_sbss
 8001fd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001fd8:	20000258 	.word	0x20000258

08001fdc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fdc:	e7fe      	b.n	8001fdc <ADC1_COMP_IRQHandler>
	...

08001fe0 <__libc_init_array>:
 8001fe0:	b570      	push	{r4, r5, r6, lr}
 8001fe2:	2600      	movs	r6, #0
 8001fe4:	4d0c      	ldr	r5, [pc, #48]	; (8002018 <__libc_init_array+0x38>)
 8001fe6:	4c0d      	ldr	r4, [pc, #52]	; (800201c <__libc_init_array+0x3c>)
 8001fe8:	1b64      	subs	r4, r4, r5
 8001fea:	10a4      	asrs	r4, r4, #2
 8001fec:	42a6      	cmp	r6, r4
 8001fee:	d109      	bne.n	8002004 <__libc_init_array+0x24>
 8001ff0:	2600      	movs	r6, #0
 8001ff2:	f000 f821 	bl	8002038 <_init>
 8001ff6:	4d0a      	ldr	r5, [pc, #40]	; (8002020 <__libc_init_array+0x40>)
 8001ff8:	4c0a      	ldr	r4, [pc, #40]	; (8002024 <__libc_init_array+0x44>)
 8001ffa:	1b64      	subs	r4, r4, r5
 8001ffc:	10a4      	asrs	r4, r4, #2
 8001ffe:	42a6      	cmp	r6, r4
 8002000:	d105      	bne.n	800200e <__libc_init_array+0x2e>
 8002002:	bd70      	pop	{r4, r5, r6, pc}
 8002004:	00b3      	lsls	r3, r6, #2
 8002006:	58eb      	ldr	r3, [r5, r3]
 8002008:	4798      	blx	r3
 800200a:	3601      	adds	r6, #1
 800200c:	e7ee      	b.n	8001fec <__libc_init_array+0xc>
 800200e:	00b3      	lsls	r3, r6, #2
 8002010:	58eb      	ldr	r3, [r5, r3]
 8002012:	4798      	blx	r3
 8002014:	3601      	adds	r6, #1
 8002016:	e7f2      	b.n	8001ffe <__libc_init_array+0x1e>
 8002018:	08002088 	.word	0x08002088
 800201c:	08002088 	.word	0x08002088
 8002020:	08002088 	.word	0x08002088
 8002024:	0800208c 	.word	0x0800208c

08002028 <memset>:
 8002028:	0003      	movs	r3, r0
 800202a:	1882      	adds	r2, r0, r2
 800202c:	4293      	cmp	r3, r2
 800202e:	d100      	bne.n	8002032 <memset+0xa>
 8002030:	4770      	bx	lr
 8002032:	7019      	strb	r1, [r3, #0]
 8002034:	3301      	adds	r3, #1
 8002036:	e7f9      	b.n	800202c <memset+0x4>

08002038 <_init>:
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800203e:	bc08      	pop	{r3}
 8002040:	469e      	mov	lr, r3
 8002042:	4770      	bx	lr

08002044 <_fini>:
 8002044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800204a:	bc08      	pop	{r3}
 800204c:	469e      	mov	lr, r3
 800204e:	4770      	bx	lr
